// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_CHANNEL_AUDIT_DETAILS_H_
#define  GOOGLE_YOUTUBE_API_CHANNEL_AUDIT_DETAILS_H_

#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * The auditDetails object encapsulates channel data that is relevant for
 * YouTube Partners during the audit process.
 *
 * @ingroup DataObject
 */
class ChannelAuditDetails : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ChannelAuditDetails* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ChannelAuditDetails(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ChannelAuditDetails(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ChannelAuditDetails();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::ChannelAuditDetails</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::ChannelAuditDetails");
  }

  /**
   * Determine if the '<code>communityGuidelinesGoodStanding</code>' attribute
   * was set.
   *
   * @return true if the '<code>communityGuidelinesGoodStanding</code>'
   * attribute was set.
   */
  bool has_community_guidelines_good_standing() const {
    return Storage().isMember("communityGuidelinesGoodStanding");
  }

  /**
   * Clears the '<code>communityGuidelinesGoodStanding</code>' attribute.
   */
  void clear_community_guidelines_good_standing() {
    MutableStorage()->removeMember("communityGuidelinesGoodStanding");
  }


  /**
   * Get the value of the '<code>communityGuidelinesGoodStanding</code>'
   * attribute.
   */
  bool get_community_guidelines_good_standing() const {
    const Json::Value& storage = Storage("communityGuidelinesGoodStanding");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>communityGuidelinesGoodStanding</code>' attribute.
   *
   * Whether or not the channel respects the community guidelines.
   *
   * @param[in] value The new value.
   */
  void set_community_guidelines_good_standing(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("communityGuidelinesGoodStanding"));
  }

  /**
   * Determine if the '<code>contentIdClaimsGoodStanding</code>' attribute was
   * set.
   *
   * @return true if the '<code>contentIdClaimsGoodStanding</code>' attribute
   * was set.
   */
  bool has_content_id_claims_good_standing() const {
    return Storage().isMember("contentIdClaimsGoodStanding");
  }

  /**
   * Clears the '<code>contentIdClaimsGoodStanding</code>' attribute.
   */
  void clear_content_id_claims_good_standing() {
    MutableStorage()->removeMember("contentIdClaimsGoodStanding");
  }


  /**
   * Get the value of the '<code>contentIdClaimsGoodStanding</code>' attribute.
   */
  bool get_content_id_claims_good_standing() const {
    const Json::Value& storage = Storage("contentIdClaimsGoodStanding");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>contentIdClaimsGoodStanding</code>' attribute.
   *
   * Whether or not the channel has any unresolved claims.
   *
   * @param[in] value The new value.
   */
  void set_content_id_claims_good_standing(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("contentIdClaimsGoodStanding"));
  }

  /**
   * Determine if the '<code>copyrightStrikesGoodStanding</code>' attribute was
   * set.
   *
   * @return true if the '<code>copyrightStrikesGoodStanding</code>' attribute
   * was set.
   */
  bool has_copyright_strikes_good_standing() const {
    return Storage().isMember("copyrightStrikesGoodStanding");
  }

  /**
   * Clears the '<code>copyrightStrikesGoodStanding</code>' attribute.
   */
  void clear_copyright_strikes_good_standing() {
    MutableStorage()->removeMember("copyrightStrikesGoodStanding");
  }


  /**
   * Get the value of the '<code>copyrightStrikesGoodStanding</code>' attribute.
   */
  bool get_copyright_strikes_good_standing() const {
    const Json::Value& storage = Storage("copyrightStrikesGoodStanding");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>copyrightStrikesGoodStanding</code>' attribute.
   *
   * Whether or not the channel has any copyright strikes.
   *
   * @param[in] value The new value.
   */
  void set_copyright_strikes_good_standing(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("copyrightStrikesGoodStanding"));
  }

  /**
   * Determine if the '<code>overallGoodStanding</code>' attribute was set.
   *
   * @return true if the '<code>overallGoodStanding</code>' attribute was set.
   */
  bool has_overall_good_standing() const {
    return Storage().isMember("overallGoodStanding");
  }

  /**
   * Clears the '<code>overallGoodStanding</code>' attribute.
   */
  void clear_overall_good_standing() {
    MutableStorage()->removeMember("overallGoodStanding");
  }


  /**
   * Get the value of the '<code>overallGoodStanding</code>' attribute.
   */
  bool get_overall_good_standing() const {
    const Json::Value& storage = Storage("overallGoodStanding");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>overallGoodStanding</code>' attribute.
   *
   * Describes the general state of the channel. This field will always show if
   * there are any issues whatsoever with the channel. Currently this field
   * represents the result of the logical and operation over the community
   * guidelines good standing, the copyright strikes good standing and the
   * content ID claims good standing, but this may change in the future.
   *
   * @param[in] value The new value.
   */
  void set_overall_good_standing(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("overallGoodStanding"));
  }

 private:
  void operator=(const ChannelAuditDetails&);
};  // ChannelAuditDetails
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_CHANNEL_AUDIT_DETAILS_H_
