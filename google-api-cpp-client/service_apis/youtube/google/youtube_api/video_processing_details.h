// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_VIDEO_PROCESSING_DETAILS_H_
#define  GOOGLE_YOUTUBE_API_VIDEO_PROCESSING_DETAILS_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/video_processing_details_processing_progress.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Describes processing status and progress and availability of some other Video
 * resource parts.
 *
 * @ingroup DataObject
 */
class VideoProcessingDetails : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static VideoProcessingDetails* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoProcessingDetails(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoProcessingDetails(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~VideoProcessingDetails();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::VideoProcessingDetails</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::VideoProcessingDetails");
  }

  /**
   * Determine if the '<code>editorSuggestionsAvailability</code>' attribute was
   * set.
   *
   * @return true if the '<code>editorSuggestionsAvailability</code>' attribute
   * was set.
   */
  bool has_editor_suggestions_availability() const {
    return Storage().isMember("editorSuggestionsAvailability");
  }

  /**
   * Clears the '<code>editorSuggestionsAvailability</code>' attribute.
   */
  void clear_editor_suggestions_availability() {
    MutableStorage()->removeMember("editorSuggestionsAvailability");
  }


  /**
   * Get the value of the '<code>editorSuggestionsAvailability</code>'
   * attribute.
   */
  const StringPiece get_editor_suggestions_availability() const {
    const Json::Value& v = Storage("editorSuggestionsAvailability");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>editorSuggestionsAvailability</code>' attribute.
   *
   * This value indicates whether video editing suggestions, which might improve
   * video quality or the playback experience, are available for the video. You
   * can retrieve these suggestions by requesting the suggestions part in your
   * videos.list() request.
   *
   * @param[in] value The new value.
   */
  void set_editor_suggestions_availability(const StringPiece& value) {
    *MutableStorage("editorSuggestionsAvailability") = value.data();
  }

  /**
   * Determine if the '<code>fileDetailsAvailability</code>' attribute was set.
   *
   * @return true if the '<code>fileDetailsAvailability</code>' attribute was
   * set.
   */
  bool has_file_details_availability() const {
    return Storage().isMember("fileDetailsAvailability");
  }

  /**
   * Clears the '<code>fileDetailsAvailability</code>' attribute.
   */
  void clear_file_details_availability() {
    MutableStorage()->removeMember("fileDetailsAvailability");
  }


  /**
   * Get the value of the '<code>fileDetailsAvailability</code>' attribute.
   */
  const StringPiece get_file_details_availability() const {
    const Json::Value& v = Storage("fileDetailsAvailability");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fileDetailsAvailability</code>' attribute.
   *
   * This value indicates whether file details are available for the uploaded
   * video. You can retrieve a video's file details by requesting the
   * fileDetails part in your videos.list() request.
   *
   * @param[in] value The new value.
   */
  void set_file_details_availability(const StringPiece& value) {
    *MutableStorage("fileDetailsAvailability") = value.data();
  }

  /**
   * Determine if the '<code>processingFailureReason</code>' attribute was set.
   *
   * @return true if the '<code>processingFailureReason</code>' attribute was
   * set.
   */
  bool has_processing_failure_reason() const {
    return Storage().isMember("processingFailureReason");
  }

  /**
   * Clears the '<code>processingFailureReason</code>' attribute.
   */
  void clear_processing_failure_reason() {
    MutableStorage()->removeMember("processingFailureReason");
  }


  /**
   * Get the value of the '<code>processingFailureReason</code>' attribute.
   */
  const StringPiece get_processing_failure_reason() const {
    const Json::Value& v = Storage("processingFailureReason");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>processingFailureReason</code>' attribute.
   *
   * The reason that YouTube failed to process the video. This property will
   * only have a value if the processingStatus property's value is failed.
   *
   * @param[in] value The new value.
   */
  void set_processing_failure_reason(const StringPiece& value) {
    *MutableStorage("processingFailureReason") = value.data();
  }

  /**
   * Determine if the '<code>processingIssuesAvailability</code>' attribute was
   * set.
   *
   * @return true if the '<code>processingIssuesAvailability</code>' attribute
   * was set.
   */
  bool has_processing_issues_availability() const {
    return Storage().isMember("processingIssuesAvailability");
  }

  /**
   * Clears the '<code>processingIssuesAvailability</code>' attribute.
   */
  void clear_processing_issues_availability() {
    MutableStorage()->removeMember("processingIssuesAvailability");
  }


  /**
   * Get the value of the '<code>processingIssuesAvailability</code>' attribute.
   */
  const StringPiece get_processing_issues_availability() const {
    const Json::Value& v = Storage("processingIssuesAvailability");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>processingIssuesAvailability</code>' attribute.
   *
   * This value indicates whether the video processing engine has generated
   * suggestions that might improve YouTube's ability to process the the video,
   * warnings that explain video processing problems, or errors that cause video
   * processing problems. You can retrieve these suggestions by requesting the
   * suggestions part in your videos.list() request.
   *
   * @param[in] value The new value.
   */
  void set_processing_issues_availability(const StringPiece& value) {
    *MutableStorage("processingIssuesAvailability") = value.data();
  }

  /**
   * Determine if the '<code>processingProgress</code>' attribute was set.
   *
   * @return true if the '<code>processingProgress</code>' attribute was set.
   */
  bool has_processing_progress() const {
    return Storage().isMember("processingProgress");
  }

  /**
   * Clears the '<code>processingProgress</code>' attribute.
   */
  void clear_processing_progress() {
    MutableStorage()->removeMember("processingProgress");
  }


  /**
   * Get a reference to the value of the '<code>processingProgress</code>'
   * attribute.
   */
  const VideoProcessingDetailsProcessingProgress get_processing_progress() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>processingProgress</code>' property.
   *
   * The processingProgress object contains information about the progress
   * YouTube has made in processing the video. The values are really only
   * relevant if the video's processing status is processing.
   *
   * @return The result can be modified to change the attribute value.
   */
  VideoProcessingDetailsProcessingProgress mutable_processingProgress();

  /**
   * Determine if the '<code>processingStatus</code>' attribute was set.
   *
   * @return true if the '<code>processingStatus</code>' attribute was set.
   */
  bool has_processing_status() const {
    return Storage().isMember("processingStatus");
  }

  /**
   * Clears the '<code>processingStatus</code>' attribute.
   */
  void clear_processing_status() {
    MutableStorage()->removeMember("processingStatus");
  }


  /**
   * Get the value of the '<code>processingStatus</code>' attribute.
   */
  const StringPiece get_processing_status() const {
    const Json::Value& v = Storage("processingStatus");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>processingStatus</code>' attribute.
   *
   * The video's processing status. This value indicates whether YouTube was
   * able to process the video or if the video is still being processed.
   *
   * @param[in] value The new value.
   */
  void set_processing_status(const StringPiece& value) {
    *MutableStorage("processingStatus") = value.data();
  }

  /**
   * Determine if the '<code>tagSuggestionsAvailability</code>' attribute was
   * set.
   *
   * @return true if the '<code>tagSuggestionsAvailability</code>' attribute was
   * set.
   */
  bool has_tag_suggestions_availability() const {
    return Storage().isMember("tagSuggestionsAvailability");
  }

  /**
   * Clears the '<code>tagSuggestionsAvailability</code>' attribute.
   */
  void clear_tag_suggestions_availability() {
    MutableStorage()->removeMember("tagSuggestionsAvailability");
  }


  /**
   * Get the value of the '<code>tagSuggestionsAvailability</code>' attribute.
   */
  const StringPiece get_tag_suggestions_availability() const {
    const Json::Value& v = Storage("tagSuggestionsAvailability");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>tagSuggestionsAvailability</code>' attribute.
   *
   * This value indicates whether keyword (tag) suggestions are available for
   * the video. Tags can be added to a video's metadata to make it easier for
   * other users to find the video. You can retrieve these suggestions by
   * requesting the suggestions part in your videos.list() request.
   *
   * @param[in] value The new value.
   */
  void set_tag_suggestions_availability(const StringPiece& value) {
    *MutableStorage("tagSuggestionsAvailability") = value.data();
  }

  /**
   * Determine if the '<code>thumbnailsAvailability</code>' attribute was set.
   *
   * @return true if the '<code>thumbnailsAvailability</code>' attribute was
   * set.
   */
  bool has_thumbnails_availability() const {
    return Storage().isMember("thumbnailsAvailability");
  }

  /**
   * Clears the '<code>thumbnailsAvailability</code>' attribute.
   */
  void clear_thumbnails_availability() {
    MutableStorage()->removeMember("thumbnailsAvailability");
  }


  /**
   * Get the value of the '<code>thumbnailsAvailability</code>' attribute.
   */
  const StringPiece get_thumbnails_availability() const {
    const Json::Value& v = Storage("thumbnailsAvailability");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>thumbnailsAvailability</code>' attribute.
   *
   * This value indicates whether thumbnail images have been generated for the
   * video.
   *
   * @param[in] value The new value.
   */
  void set_thumbnails_availability(const StringPiece& value) {
    *MutableStorage("thumbnailsAvailability") = value.data();
  }

 private:
  void operator=(const VideoProcessingDetails&);
};  // VideoProcessingDetails
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_VIDEO_PROCESSING_DETAILS_H_
