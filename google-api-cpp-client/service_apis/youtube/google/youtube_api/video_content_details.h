// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_VIDEO_CONTENT_DETAILS_H_
#define  GOOGLE_YOUTUBE_API_VIDEO_CONTENT_DETAILS_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/access_policy.h"
#include "google/youtube_api/content_rating.h"
#include "google/youtube_api/video_content_details_region_restriction.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Details about the content of a YouTube Video.
 *
 * @ingroup DataObject
 */
class VideoContentDetails : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static VideoContentDetails* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoContentDetails(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoContentDetails(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~VideoContentDetails();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::VideoContentDetails</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::VideoContentDetails");
  }

  /**
   * Determine if the '<code>caption</code>' attribute was set.
   *
   * @return true if the '<code>caption</code>' attribute was set.
   */
  bool has_caption() const {
    return Storage().isMember("caption");
  }

  /**
   * Clears the '<code>caption</code>' attribute.
   */
  void clear_caption() {
    MutableStorage()->removeMember("caption");
  }


  /**
   * Get the value of the '<code>caption</code>' attribute.
   */
  const StringPiece get_caption() const {
    const Json::Value& v = Storage("caption");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>caption</code>' attribute.
   *
   * The value of captions indicates whether the video has captions or not.
   *
   * @param[in] value The new value.
   */
  void set_caption(const StringPiece& value) {
    *MutableStorage("caption") = value.data();
  }

  /**
   * Determine if the '<code>contentRating</code>' attribute was set.
   *
   * @return true if the '<code>contentRating</code>' attribute was set.
   */
  bool has_content_rating() const {
    return Storage().isMember("contentRating");
  }

  /**
   * Clears the '<code>contentRating</code>' attribute.
   */
  void clear_content_rating() {
    MutableStorage()->removeMember("contentRating");
  }


  /**
   * Get a reference to the value of the '<code>contentRating</code>' attribute.
   */
  const ContentRating get_content_rating() const;

  /**
   * Gets a reference to a mutable value of the '<code>contentRating</code>'
   * property.
   *
   * Specifies the ratings that the video received under various rating schemes.
   *
   * @return The result can be modified to change the attribute value.
   */
  ContentRating mutable_contentRating();

  /**
   * Determine if the '<code>countryRestriction</code>' attribute was set.
   *
   * @return true if the '<code>countryRestriction</code>' attribute was set.
   */
  bool has_country_restriction() const {
    return Storage().isMember("countryRestriction");
  }

  /**
   * Clears the '<code>countryRestriction</code>' attribute.
   */
  void clear_country_restriction() {
    MutableStorage()->removeMember("countryRestriction");
  }


  /**
   * Get a reference to the value of the '<code>countryRestriction</code>'
   * attribute.
   */
  const AccessPolicy get_country_restriction() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>countryRestriction</code>' property.
   *
   * The countryRestriction object contains information about the countries
   * where a video is (or is not) viewable.
   *
   * @return The result can be modified to change the attribute value.
   */
  AccessPolicy mutable_countryRestriction();

  /**
   * Determine if the '<code>definition</code>' attribute was set.
   *
   * @return true if the '<code>definition</code>' attribute was set.
   */
  bool has_definition() const {
    return Storage().isMember("definition");
  }

  /**
   * Clears the '<code>definition</code>' attribute.
   */
  void clear_definition() {
    MutableStorage()->removeMember("definition");
  }


  /**
   * Get the value of the '<code>definition</code>' attribute.
   */
  const StringPiece get_definition() const {
    const Json::Value& v = Storage("definition");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>definition</code>' attribute.
   *
   * The value of definition indicates whether the video is available in high
   * definition or only in standard definition.
   *
   * @param[in] value The new value.
   */
  void set_definition(const StringPiece& value) {
    *MutableStorage("definition") = value.data();
  }

  /**
   * Determine if the '<code>dimension</code>' attribute was set.
   *
   * @return true if the '<code>dimension</code>' attribute was set.
   */
  bool has_dimension() const {
    return Storage().isMember("dimension");
  }

  /**
   * Clears the '<code>dimension</code>' attribute.
   */
  void clear_dimension() {
    MutableStorage()->removeMember("dimension");
  }


  /**
   * Get the value of the '<code>dimension</code>' attribute.
   */
  const StringPiece get_dimension() const {
    const Json::Value& v = Storage("dimension");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>dimension</code>' attribute.
   *
   * The value of dimension indicates whether the video is available in 3D or in
   * 2D.
   *
   * @param[in] value The new value.
   */
  void set_dimension(const StringPiece& value) {
    *MutableStorage("dimension") = value.data();
  }

  /**
   * Determine if the '<code>duration</code>' attribute was set.
   *
   * @return true if the '<code>duration</code>' attribute was set.
   */
  bool has_duration() const {
    return Storage().isMember("duration");
  }

  /**
   * Clears the '<code>duration</code>' attribute.
   */
  void clear_duration() {
    MutableStorage()->removeMember("duration");
  }


  /**
   * Get the value of the '<code>duration</code>' attribute.
   */
  const StringPiece get_duration() const {
    const Json::Value& v = Storage("duration");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>duration</code>' attribute.
   *
   * The length of the video. The tag value is an ISO 8601 duration in the
   * format PT#M#S, in which the letters PT indicate that the value specifies a
   * period of time, and the letters M and S refer to length in minutes and
   * seconds, respectively. The # characters preceding the M and S letters are
   * both integers that specify the number of minutes (or seconds) of the video.
   * For example, a value of PT15M51S indicates that the video is 15 minutes and
   * 51 seconds long.
   *
   * @param[in] value The new value.
   */
  void set_duration(const StringPiece& value) {
    *MutableStorage("duration") = value.data();
  }

  /**
   * Determine if the '<code>licensedContent</code>' attribute was set.
   *
   * @return true if the '<code>licensedContent</code>' attribute was set.
   */
  bool has_licensed_content() const {
    return Storage().isMember("licensedContent");
  }

  /**
   * Clears the '<code>licensedContent</code>' attribute.
   */
  void clear_licensed_content() {
    MutableStorage()->removeMember("licensedContent");
  }


  /**
   * Get the value of the '<code>licensedContent</code>' attribute.
   */
  bool get_licensed_content() const {
    const Json::Value& storage = Storage("licensedContent");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>licensedContent</code>' attribute.
   *
   * The value of is_license_content indicates whether the video is licensed
   * content.
   *
   * @param[in] value The new value.
   */
  void set_licensed_content(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("licensedContent"));
  }

  /**
   * Determine if the '<code>regionRestriction</code>' attribute was set.
   *
   * @return true if the '<code>regionRestriction</code>' attribute was set.
   */
  bool has_region_restriction() const {
    return Storage().isMember("regionRestriction");
  }

  /**
   * Clears the '<code>regionRestriction</code>' attribute.
   */
  void clear_region_restriction() {
    MutableStorage()->removeMember("regionRestriction");
  }


  /**
   * Get a reference to the value of the '<code>regionRestriction</code>'
   * attribute.
   */
  const VideoContentDetailsRegionRestriction get_region_restriction() const;

  /**
   * Gets a reference to a mutable value of the '<code>regionRestriction</code>'
   * property.
   *
   * The regionRestriction object contains information about the countries where
   * a video is (or is not) viewable. The object will contain either the
   * contentDetails.regionRestriction.allowed property or the
   * contentDetails.regionRestriction.blocked property.
   *
   * @return The result can be modified to change the attribute value.
   */
  VideoContentDetailsRegionRestriction mutable_regionRestriction();

 private:
  void operator=(const VideoContentDetails&);
};  // VideoContentDetails
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_VIDEO_CONTENT_DETAILS_H_
