// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_H_
#define  GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_H_

#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/activity_content_details_bulletin.h"
#include "google/youtube_api/activity_content_details_channel_item.h"
#include "google/youtube_api/activity_content_details_comment.h"
#include "google/youtube_api/activity_content_details_favorite.h"
#include "google/youtube_api/activity_content_details_like.h"
#include "google/youtube_api/activity_content_details_playlist_item.h"
#include "google/youtube_api/activity_content_details_promoted_item.h"
#include "google/youtube_api/activity_content_details_recommendation.h"
#include "google/youtube_api/activity_content_details_social.h"
#include "google/youtube_api/activity_content_details_subscription.h"
#include "google/youtube_api/activity_content_details_upload.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Details about the content of an activity: the video that was shared, the
 * channel that was subscribed to, etc.
 *
 * @ingroup DataObject
 */
class ActivityContentDetails : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ActivityContentDetails* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ActivityContentDetails(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ActivityContentDetails(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ActivityContentDetails();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::ActivityContentDetails</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::ActivityContentDetails");
  }

  /**
   * Determine if the '<code>bulletin</code>' attribute was set.
   *
   * @return true if the '<code>bulletin</code>' attribute was set.
   */
  bool has_bulletin() const {
    return Storage().isMember("bulletin");
  }

  /**
   * Clears the '<code>bulletin</code>' attribute.
   */
  void clear_bulletin() {
    MutableStorage()->removeMember("bulletin");
  }


  /**
   * Get a reference to the value of the '<code>bulletin</code>' attribute.
   */
  const ActivityContentDetailsBulletin get_bulletin() const;

  /**
   * Gets a reference to a mutable value of the '<code>bulletin</code>'
   * property.
   *
   * The bulletin object contains details about a channel bulletin post. This
   * object is only present if the snippet.type is bulletin.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsBulletin mutable_bulletin();

  /**
   * Determine if the '<code>channelItem</code>' attribute was set.
   *
   * @return true if the '<code>channelItem</code>' attribute was set.
   */
  bool has_channel_item() const {
    return Storage().isMember("channelItem");
  }

  /**
   * Clears the '<code>channelItem</code>' attribute.
   */
  void clear_channel_item() {
    MutableStorage()->removeMember("channelItem");
  }


  /**
   * Get a reference to the value of the '<code>channelItem</code>' attribute.
   */
  const ActivityContentDetailsChannelItem get_channel_item() const;

  /**
   * Gets a reference to a mutable value of the '<code>channelItem</code>'
   * property.
   *
   * The channelItem object contains details about a resource which was added to
   * a channel. This property is only present if the snippet.type is
   * channelItem.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsChannelItem mutable_channelItem();

  /**
   * Determine if the '<code>comment</code>' attribute was set.
   *
   * @return true if the '<code>comment</code>' attribute was set.
   */
  bool has_comment() const {
    return Storage().isMember("comment");
  }

  /**
   * Clears the '<code>comment</code>' attribute.
   */
  void clear_comment() {
    MutableStorage()->removeMember("comment");
  }


  /**
   * Get a reference to the value of the '<code>comment</code>' attribute.
   */
  const ActivityContentDetailsComment get_comment() const;

  /**
   * Gets a reference to a mutable value of the '<code>comment</code>' property.
   *
   * The comment object contains information about a resource that received a
   * comment. This property is only present if the snippet.type is comment.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsComment mutable_comment();

  /**
   * Determine if the '<code>favorite</code>' attribute was set.
   *
   * @return true if the '<code>favorite</code>' attribute was set.
   */
  bool has_favorite() const {
    return Storage().isMember("favorite");
  }

  /**
   * Clears the '<code>favorite</code>' attribute.
   */
  void clear_favorite() {
    MutableStorage()->removeMember("favorite");
  }


  /**
   * Get a reference to the value of the '<code>favorite</code>' attribute.
   */
  const ActivityContentDetailsFavorite get_favorite() const;

  /**
   * Gets a reference to a mutable value of the '<code>favorite</code>'
   * property.
   *
   * The favorite object contains information about a video that was marked as a
   * favorite video. This property is only present if the snippet.type is
   * favorite.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsFavorite mutable_favorite();

  /**
   * Determine if the '<code>like</code>' attribute was set.
   *
   * @return true if the '<code>like</code>' attribute was set.
   */
  bool has_like() const {
    return Storage().isMember("like");
  }

  /**
   * Clears the '<code>like</code>' attribute.
   */
  void clear_like() {
    MutableStorage()->removeMember("like");
  }


  /**
   * Get a reference to the value of the '<code>like</code>' attribute.
   */
  const ActivityContentDetailsLike get_like() const;

  /**
   * Gets a reference to a mutable value of the '<code>like</code>' property.
   *
   * The like object contains information about a resource that received a
   * positive (like) rating. This property is only present if the snippet.type
   * is like.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsLike mutable_like();

  /**
   * Determine if the '<code>playlistItem</code>' attribute was set.
   *
   * @return true if the '<code>playlistItem</code>' attribute was set.
   */
  bool has_playlist_item() const {
    return Storage().isMember("playlistItem");
  }

  /**
   * Clears the '<code>playlistItem</code>' attribute.
   */
  void clear_playlist_item() {
    MutableStorage()->removeMember("playlistItem");
  }


  /**
   * Get a reference to the value of the '<code>playlistItem</code>' attribute.
   */
  const ActivityContentDetailsPlaylistItem get_playlist_item() const;

  /**
   * Gets a reference to a mutable value of the '<code>playlistItem</code>'
   * property.
   *
   * The playlistItem object contains information about a new playlist item.
   * This property is only present if the snippet.type is playlistItem.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsPlaylistItem mutable_playlistItem();

  /**
   * Determine if the '<code>promotedItem</code>' attribute was set.
   *
   * @return true if the '<code>promotedItem</code>' attribute was set.
   */
  bool has_promoted_item() const {
    return Storage().isMember("promotedItem");
  }

  /**
   * Clears the '<code>promotedItem</code>' attribute.
   */
  void clear_promoted_item() {
    MutableStorage()->removeMember("promotedItem");
  }


  /**
   * Get a reference to the value of the '<code>promotedItem</code>' attribute.
   */
  const ActivityContentDetailsPromotedItem get_promoted_item() const;

  /**
   * Gets a reference to a mutable value of the '<code>promotedItem</code>'
   * property.
   *
   * The promotedItem object contains details about a resource which is being
   * promoted. This property is only present if the snippet.type is
   * promotedItem.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsPromotedItem mutable_promotedItem();

  /**
   * Determine if the '<code>recommendation</code>' attribute was set.
   *
   * @return true if the '<code>recommendation</code>' attribute was set.
   */
  bool has_recommendation() const {
    return Storage().isMember("recommendation");
  }

  /**
   * Clears the '<code>recommendation</code>' attribute.
   */
  void clear_recommendation() {
    MutableStorage()->removeMember("recommendation");
  }


  /**
   * Get a reference to the value of the '<code>recommendation</code>'
   * attribute.
   */
  const ActivityContentDetailsRecommendation get_recommendation() const;

  /**
   * Gets a reference to a mutable value of the '<code>recommendation</code>'
   * property.
   *
   * The recommendation object contains information about a recommended
   * resource. This property is only present if the snippet.type is
   * recommendation.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsRecommendation mutable_recommendation();

  /**
   * Determine if the '<code>social</code>' attribute was set.
   *
   * @return true if the '<code>social</code>' attribute was set.
   */
  bool has_social() const {
    return Storage().isMember("social");
  }

  /**
   * Clears the '<code>social</code>' attribute.
   */
  void clear_social() {
    MutableStorage()->removeMember("social");
  }


  /**
   * Get a reference to the value of the '<code>social</code>' attribute.
   */
  const ActivityContentDetailsSocial get_social() const;

  /**
   * Gets a reference to a mutable value of the '<code>social</code>' property.
   *
   * The social object contains details about a social network post. This
   * property is only present if the snippet.type is social.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsSocial mutable_social();

  /**
   * Determine if the '<code>subscription</code>' attribute was set.
   *
   * @return true if the '<code>subscription</code>' attribute was set.
   */
  bool has_subscription() const {
    return Storage().isMember("subscription");
  }

  /**
   * Clears the '<code>subscription</code>' attribute.
   */
  void clear_subscription() {
    MutableStorage()->removeMember("subscription");
  }


  /**
   * Get a reference to the value of the '<code>subscription</code>' attribute.
   */
  const ActivityContentDetailsSubscription get_subscription() const;

  /**
   * Gets a reference to a mutable value of the '<code>subscription</code>'
   * property.
   *
   * The subscription object contains information about a channel that a user
   * subscribed to. This property is only present if the snippet.type is
   * subscription.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsSubscription mutable_subscription();

  /**
   * Determine if the '<code>upload</code>' attribute was set.
   *
   * @return true if the '<code>upload</code>' attribute was set.
   */
  bool has_upload() const {
    return Storage().isMember("upload");
  }

  /**
   * Clears the '<code>upload</code>' attribute.
   */
  void clear_upload() {
    MutableStorage()->removeMember("upload");
  }


  /**
   * Get a reference to the value of the '<code>upload</code>' attribute.
   */
  const ActivityContentDetailsUpload get_upload() const;

  /**
   * Gets a reference to a mutable value of the '<code>upload</code>' property.
   *
   * The upload object contains information about the uploaded video. This
   * property is only present if the snippet.type is upload.
   *
   * @return The result can be modified to change the attribute value.
   */
  ActivityContentDetailsUpload mutable_upload();

 private:
  void operator=(const ActivityContentDetails&);
};  // ActivityContentDetails
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_H_
