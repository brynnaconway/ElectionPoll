// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_VIDEO_LIVE_STREAMING_DETAILS_H_
#define  GOOGLE_YOUTUBE_API_VIDEO_LIVE_STREAMING_DETAILS_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Details about the live streaming metadata.
 *
 * @ingroup DataObject
 */
class VideoLiveStreamingDetails : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static VideoLiveStreamingDetails* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoLiveStreamingDetails(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoLiveStreamingDetails(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~VideoLiveStreamingDetails();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::VideoLiveStreamingDetails</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::VideoLiveStreamingDetails");
  }

  /**
   * Determine if the '<code>activeLiveChatId</code>' attribute was set.
   *
   * @return true if the '<code>activeLiveChatId</code>' attribute was set.
   */
  bool has_active_live_chat_id() const {
    return Storage().isMember("activeLiveChatId");
  }

  /**
   * Clears the '<code>activeLiveChatId</code>' attribute.
   */
  void clear_active_live_chat_id() {
    MutableStorage()->removeMember("activeLiveChatId");
  }


  /**
   * Get the value of the '<code>activeLiveChatId</code>' attribute.
   */
  const StringPiece get_active_live_chat_id() const {
    const Json::Value& v = Storage("activeLiveChatId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>activeLiveChatId</code>' attribute.
   *
   * The ID of the currently active live chat attached to this video. This field
   * is filled only if the video is a currently live broadcast that has live
   * chat. Once the broadcast transitions to complete this field will be removed
   * and the live chat closed down. For persistent broadcasts that live chat id
   * will no longer be tied to this video but rather to the new video being
   * displayed at the persistent page.
   *
   * @param[in] value The new value.
   */
  void set_active_live_chat_id(const StringPiece& value) {
    *MutableStorage("activeLiveChatId") = value.data();
  }

  /**
   * Determine if the '<code>actualEndTime</code>' attribute was set.
   *
   * @return true if the '<code>actualEndTime</code>' attribute was set.
   */
  bool has_actual_end_time() const {
    return Storage().isMember("actualEndTime");
  }

  /**
   * Clears the '<code>actualEndTime</code>' attribute.
   */
  void clear_actual_end_time() {
    MutableStorage()->removeMember("actualEndTime");
  }


  /**
   * Get the value of the '<code>actualEndTime</code>' attribute.
   */
  client::DateTime get_actual_end_time() const {
    const Json::Value& storage = Storage("actualEndTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>actualEndTime</code>' attribute.
   *
   * The time that the broadcast actually ended. The value is specified in ISO
   * 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available
   * until the broadcast is over.
   *
   * @param[in] value The new value.
   */
  void set_actual_end_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("actualEndTime"));
  }

  /**
   * Determine if the '<code>actualStartTime</code>' attribute was set.
   *
   * @return true if the '<code>actualStartTime</code>' attribute was set.
   */
  bool has_actual_start_time() const {
    return Storage().isMember("actualStartTime");
  }

  /**
   * Clears the '<code>actualStartTime</code>' attribute.
   */
  void clear_actual_start_time() {
    MutableStorage()->removeMember("actualStartTime");
  }


  /**
   * Get the value of the '<code>actualStartTime</code>' attribute.
   */
  client::DateTime get_actual_start_time() const {
    const Json::Value& storage = Storage("actualStartTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>actualStartTime</code>' attribute.
   *
   * The time that the broadcast actually started. The value is specified in ISO
   * 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. This value will not be available
   * until the broadcast begins.
   *
   * @param[in] value The new value.
   */
  void set_actual_start_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("actualStartTime"));
  }

  /**
   * Determine if the '<code>concurrentViewers</code>' attribute was set.
   *
   * @return true if the '<code>concurrentViewers</code>' attribute was set.
   */
  bool has_concurrent_viewers() const {
    return Storage().isMember("concurrentViewers");
  }

  /**
   * Clears the '<code>concurrentViewers</code>' attribute.
   */
  void clear_concurrent_viewers() {
    MutableStorage()->removeMember("concurrentViewers");
  }


  /**
   * Get the value of the '<code>concurrentViewers</code>' attribute.
   */
  uint64 get_concurrent_viewers() const {
    const Json::Value& storage = Storage("concurrentViewers");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>concurrentViewers</code>' attribute.
   *
   * The number of viewers currently watching the broadcast. The property and
   * its value will be present if the broadcast has current viewers and the
   * broadcast owner has not hidden the viewcount for the video. Note that
   * YouTube stops tracking the number of concurrent viewers for a broadcast
   * when the broadcast ends. So, this property would not identify the number of
   * viewers watching an archived video of a live broadcast that already ended.
   *
   * @param[in] value The new value.
   */
  void set_concurrent_viewers(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("concurrentViewers"));
  }

  /**
   * Determine if the '<code>scheduledEndTime</code>' attribute was set.
   *
   * @return true if the '<code>scheduledEndTime</code>' attribute was set.
   */
  bool has_scheduled_end_time() const {
    return Storage().isMember("scheduledEndTime");
  }

  /**
   * Clears the '<code>scheduledEndTime</code>' attribute.
   */
  void clear_scheduled_end_time() {
    MutableStorage()->removeMember("scheduledEndTime");
  }


  /**
   * Get the value of the '<code>scheduledEndTime</code>' attribute.
   */
  client::DateTime get_scheduled_end_time() const {
    const Json::Value& storage = Storage("scheduledEndTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>scheduledEndTime</code>' attribute.
   *
   * The time that the broadcast is scheduled to end. The value is specified in
   * ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format. If the value is empty or the
   * property is not present, then the broadcast is scheduled to continue
   * indefinitely.
   *
   * @param[in] value The new value.
   */
  void set_scheduled_end_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("scheduledEndTime"));
  }

  /**
   * Determine if the '<code>scheduledStartTime</code>' attribute was set.
   *
   * @return true if the '<code>scheduledStartTime</code>' attribute was set.
   */
  bool has_scheduled_start_time() const {
    return Storage().isMember("scheduledStartTime");
  }

  /**
   * Clears the '<code>scheduledStartTime</code>' attribute.
   */
  void clear_scheduled_start_time() {
    MutableStorage()->removeMember("scheduledStartTime");
  }


  /**
   * Get the value of the '<code>scheduledStartTime</code>' attribute.
   */
  client::DateTime get_scheduled_start_time() const {
    const Json::Value& storage = Storage("scheduledStartTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>scheduledStartTime</code>' attribute.
   *
   * The time that the broadcast is scheduled to begin. The value is specified
   * in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
   *
   * @param[in] value The new value.
   */
  void set_scheduled_start_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("scheduledStartTime"));
  }

 private:
  void operator=(const VideoLiveStreamingDetails&);
};  // VideoLiveStreamingDetails
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_VIDEO_LIVE_STREAMING_DETAILS_H_
