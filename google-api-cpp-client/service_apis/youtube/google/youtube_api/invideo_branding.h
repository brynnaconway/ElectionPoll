// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_INVIDEO_BRANDING_H_
#define  GOOGLE_YOUTUBE_API_INVIDEO_BRANDING_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/invideo_position.h"
#include "google/youtube_api/invideo_timing.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * No description provided.
 *
 * @ingroup DataObject
 */
class InvideoBranding : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static InvideoBranding* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InvideoBranding(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit InvideoBranding(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~InvideoBranding();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::InvideoBranding</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::InvideoBranding");
  }

  /**
   * Determine if the '<code>imageBytes</code>' attribute was set.
   *
   * @return true if the '<code>imageBytes</code>' attribute was set.
   */
  bool has_image_bytes() const {
    return Storage().isMember("imageBytes");
  }

  /**
   * Clears the '<code>imageBytes</code>' attribute.
   */
  void clear_image_bytes() {
    MutableStorage()->removeMember("imageBytes");
  }


  /**
   * Get the value of the '<code>imageBytes</code>' attribute.
   */
  const StringPiece get_image_bytes() const {
    const Json::Value& v = Storage("imageBytes");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>imageBytes</code>' attribute.
   * @param[in] value The new value.
   */
  void set_image_bytes(const StringPiece& value) {
    *MutableStorage("imageBytes") = value.data();
  }

  /**
   * Determine if the '<code>imageUrl</code>' attribute was set.
   *
   * @return true if the '<code>imageUrl</code>' attribute was set.
   */
  bool has_image_url() const {
    return Storage().isMember("imageUrl");
  }

  /**
   * Clears the '<code>imageUrl</code>' attribute.
   */
  void clear_image_url() {
    MutableStorage()->removeMember("imageUrl");
  }


  /**
   * Get the value of the '<code>imageUrl</code>' attribute.
   */
  const StringPiece get_image_url() const {
    const Json::Value& v = Storage("imageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>imageUrl</code>' attribute.
   * @param[in] value The new value.
   */
  void set_image_url(const StringPiece& value) {
    *MutableStorage("imageUrl") = value.data();
  }

  /**
   * Determine if the '<code>position</code>' attribute was set.
   *
   * @return true if the '<code>position</code>' attribute was set.
   */
  bool has_position() const {
    return Storage().isMember("position");
  }

  /**
   * Clears the '<code>position</code>' attribute.
   */
  void clear_position() {
    MutableStorage()->removeMember("position");
  }


  /**
   * Get a reference to the value of the '<code>position</code>' attribute.
   */
  const InvideoPosition get_position() const;

  /**
   * Gets a reference to a mutable value of the '<code>position</code>'
   * property.
   * @return The result can be modified to change the attribute value.
   */
  InvideoPosition mutable_position();

  /**
   * Determine if the '<code>targetChannelId</code>' attribute was set.
   *
   * @return true if the '<code>targetChannelId</code>' attribute was set.
   */
  bool has_target_channel_id() const {
    return Storage().isMember("targetChannelId");
  }

  /**
   * Clears the '<code>targetChannelId</code>' attribute.
   */
  void clear_target_channel_id() {
    MutableStorage()->removeMember("targetChannelId");
  }


  /**
   * Get the value of the '<code>targetChannelId</code>' attribute.
   */
  const StringPiece get_target_channel_id() const {
    const Json::Value& v = Storage("targetChannelId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>targetChannelId</code>' attribute.
   * @param[in] value The new value.
   */
  void set_target_channel_id(const StringPiece& value) {
    *MutableStorage("targetChannelId") = value.data();
  }

  /**
   * Determine if the '<code>timing</code>' attribute was set.
   *
   * @return true if the '<code>timing</code>' attribute was set.
   */
  bool has_timing() const {
    return Storage().isMember("timing");
  }

  /**
   * Clears the '<code>timing</code>' attribute.
   */
  void clear_timing() {
    MutableStorage()->removeMember("timing");
  }


  /**
   * Get a reference to the value of the '<code>timing</code>' attribute.
   */
  const InvideoTiming get_timing() const;

  /**
   * Gets a reference to a mutable value of the '<code>timing</code>' property.
   * @return The result can be modified to change the attribute value.
   */
  InvideoTiming mutable_timing();

 private:
  void operator=(const InvideoBranding&);
};  // InvideoBranding
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_INVIDEO_BRANDING_H_
