// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_VIDEO_RECORDING_DETAILS_H_
#define  GOOGLE_YOUTUBE_API_VIDEO_RECORDING_DETAILS_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/geo_point.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Recording information associated with the video.
 *
 * @ingroup DataObject
 */
class VideoRecordingDetails : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static VideoRecordingDetails* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoRecordingDetails(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoRecordingDetails(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~VideoRecordingDetails();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::VideoRecordingDetails</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::VideoRecordingDetails");
  }

  /**
   * Determine if the '<code>location</code>' attribute was set.
   *
   * @return true if the '<code>location</code>' attribute was set.
   */
  bool has_location() const {
    return Storage().isMember("location");
  }

  /**
   * Clears the '<code>location</code>' attribute.
   */
  void clear_location() {
    MutableStorage()->removeMember("location");
  }


  /**
   * Get a reference to the value of the '<code>location</code>' attribute.
   */
  const GeoPoint get_location() const;

  /**
   * Gets a reference to a mutable value of the '<code>location</code>'
   * property.
   *
   * The geolocation information associated with the video.
   *
   * @return The result can be modified to change the attribute value.
   */
  GeoPoint mutable_location();

  /**
   * Determine if the '<code>locationDescription</code>' attribute was set.
   *
   * @return true if the '<code>locationDescription</code>' attribute was set.
   */
  bool has_location_description() const {
    return Storage().isMember("locationDescription");
  }

  /**
   * Clears the '<code>locationDescription</code>' attribute.
   */
  void clear_location_description() {
    MutableStorage()->removeMember("locationDescription");
  }


  /**
   * Get the value of the '<code>locationDescription</code>' attribute.
   */
  const StringPiece get_location_description() const {
    const Json::Value& v = Storage("locationDescription");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>locationDescription</code>' attribute.
   *
   * The text description of the location where the video was recorded.
   *
   * @param[in] value The new value.
   */
  void set_location_description(const StringPiece& value) {
    *MutableStorage("locationDescription") = value.data();
  }

  /**
   * Determine if the '<code>recordingDate</code>' attribute was set.
   *
   * @return true if the '<code>recordingDate</code>' attribute was set.
   */
  bool has_recording_date() const {
    return Storage().isMember("recordingDate");
  }

  /**
   * Clears the '<code>recordingDate</code>' attribute.
   */
  void clear_recording_date() {
    MutableStorage()->removeMember("recordingDate");
  }


  /**
   * Get the value of the '<code>recordingDate</code>' attribute.
   */
  client::DateTime get_recording_date() const {
    const Json::Value& storage = Storage("recordingDate");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>recordingDate</code>' attribute.
   *
   * The date and time when the video was recorded. The value is specified in
   * ISO 8601 (YYYY-MM-DDThh:mm:ss.sssZ) format.
   *
   * @param[in] value The new value.
   */
  void set_recording_date(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("recordingDate"));
  }

 private:
  void operator=(const VideoRecordingDetails&);
};  // VideoRecordingDetails
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_VIDEO_RECORDING_DETAILS_H_
