// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_CONTENT_RATING_H_
#define  GOOGLE_YOUTUBE_API_CONTENT_RATING_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Ratings schemes. The country-specific ratings are mostly for movies and
 * shows. NEXT_ID: 66.
 *
 * @ingroup DataObject
 */
class ContentRating : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ContentRating* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ContentRating(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ContentRating(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ContentRating();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::ContentRating</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::ContentRating");
  }

  /**
   * Determine if the '<code>acbRating</code>' attribute was set.
   *
   * @return true if the '<code>acbRating</code>' attribute was set.
   */
  bool has_acb_rating() const {
    return Storage().isMember("acbRating");
  }

  /**
   * Clears the '<code>acbRating</code>' attribute.
   */
  void clear_acb_rating() {
    MutableStorage()->removeMember("acbRating");
  }


  /**
   * Get the value of the '<code>acbRating</code>' attribute.
   */
  const StringPiece get_acb_rating() const {
    const Json::Value& v = Storage("acbRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>acbRating</code>' attribute.
   *
   * The video's Australian Classification Board (ACB) or Australian
   * Communications and Media Authority (ACMA) rating. ACMA ratings are used to
   * classify children's television programming.
   *
   * @param[in] value The new value.
   */
  void set_acb_rating(const StringPiece& value) {
    *MutableStorage("acbRating") = value.data();
  }

  /**
   * Determine if the '<code>agcomRating</code>' attribute was set.
   *
   * @return true if the '<code>agcomRating</code>' attribute was set.
   */
  bool has_agcom_rating() const {
    return Storage().isMember("agcomRating");
  }

  /**
   * Clears the '<code>agcomRating</code>' attribute.
   */
  void clear_agcom_rating() {
    MutableStorage()->removeMember("agcomRating");
  }


  /**
   * Get the value of the '<code>agcomRating</code>' attribute.
   */
  const StringPiece get_agcom_rating() const {
    const Json::Value& v = Storage("agcomRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>agcomRating</code>' attribute.
   *
   * The video's rating from Italy's Autorità per le Garanzie nelle
   * Comunicazioni (AGCOM).
   *
   * @param[in] value The new value.
   */
  void set_agcom_rating(const StringPiece& value) {
    *MutableStorage("agcomRating") = value.data();
  }

  /**
   * Determine if the '<code>anatelRating</code>' attribute was set.
   *
   * @return true if the '<code>anatelRating</code>' attribute was set.
   */
  bool has_anatel_rating() const {
    return Storage().isMember("anatelRating");
  }

  /**
   * Clears the '<code>anatelRating</code>' attribute.
   */
  void clear_anatel_rating() {
    MutableStorage()->removeMember("anatelRating");
  }


  /**
   * Get the value of the '<code>anatelRating</code>' attribute.
   */
  const StringPiece get_anatel_rating() const {
    const Json::Value& v = Storage("anatelRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>anatelRating</code>' attribute.
   *
   * The video's Anatel (Asociación Nacional de Televisión) rating for Chilean
   * television.
   *
   * @param[in] value The new value.
   */
  void set_anatel_rating(const StringPiece& value) {
    *MutableStorage("anatelRating") = value.data();
  }

  /**
   * Determine if the '<code>bbfcRating</code>' attribute was set.
   *
   * @return true if the '<code>bbfcRating</code>' attribute was set.
   */
  bool has_bbfc_rating() const {
    return Storage().isMember("bbfcRating");
  }

  /**
   * Clears the '<code>bbfcRating</code>' attribute.
   */
  void clear_bbfc_rating() {
    MutableStorage()->removeMember("bbfcRating");
  }


  /**
   * Get the value of the '<code>bbfcRating</code>' attribute.
   */
  const StringPiece get_bbfc_rating() const {
    const Json::Value& v = Storage("bbfcRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bbfcRating</code>' attribute.
   *
   * The video's British Board of Film Classification (BBFC) rating.
   *
   * @param[in] value The new value.
   */
  void set_bbfc_rating(const StringPiece& value) {
    *MutableStorage("bbfcRating") = value.data();
  }

  /**
   * Determine if the '<code>bfvcRating</code>' attribute was set.
   *
   * @return true if the '<code>bfvcRating</code>' attribute was set.
   */
  bool has_bfvc_rating() const {
    return Storage().isMember("bfvcRating");
  }

  /**
   * Clears the '<code>bfvcRating</code>' attribute.
   */
  void clear_bfvc_rating() {
    MutableStorage()->removeMember("bfvcRating");
  }


  /**
   * Get the value of the '<code>bfvcRating</code>' attribute.
   */
  const StringPiece get_bfvc_rating() const {
    const Json::Value& v = Storage("bfvcRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bfvcRating</code>' attribute.
   *
   * The video's rating from Thailand's Board of Film and Video Censors.
   *
   * @param[in] value The new value.
   */
  void set_bfvc_rating(const StringPiece& value) {
    *MutableStorage("bfvcRating") = value.data();
  }

  /**
   * Determine if the '<code>bmukkRating</code>' attribute was set.
   *
   * @return true if the '<code>bmukkRating</code>' attribute was set.
   */
  bool has_bmukk_rating() const {
    return Storage().isMember("bmukkRating");
  }

  /**
   * Clears the '<code>bmukkRating</code>' attribute.
   */
  void clear_bmukk_rating() {
    MutableStorage()->removeMember("bmukkRating");
  }


  /**
   * Get the value of the '<code>bmukkRating</code>' attribute.
   */
  const StringPiece get_bmukk_rating() const {
    const Json::Value& v = Storage("bmukkRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bmukkRating</code>' attribute.
   *
   * The video's rating from the Austrian Board of Media Classification
   * (Bundesministerium für Unterricht, Kunst und Kultur).
   *
   * @param[in] value The new value.
   */
  void set_bmukk_rating(const StringPiece& value) {
    *MutableStorage("bmukkRating") = value.data();
  }

  /**
   * Determine if the '<code>catvRating</code>' attribute was set.
   *
   * @return true if the '<code>catvRating</code>' attribute was set.
   */
  bool has_catv_rating() const {
    return Storage().isMember("catvRating");
  }

  /**
   * Clears the '<code>catvRating</code>' attribute.
   */
  void clear_catv_rating() {
    MutableStorage()->removeMember("catvRating");
  }


  /**
   * Get the value of the '<code>catvRating</code>' attribute.
   */
  const StringPiece get_catv_rating() const {
    const Json::Value& v = Storage("catvRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>catvRating</code>' attribute.
   *
   * Rating system for Canadian TV - Canadian TV Classification System The
   * video's rating from the Canadian Radio-Television and Telecommunications
   * Commission (CRTC) for Canadian English-language broadcasts. For more
   * information, see the Canadian Broadcast Standards Council website.
   *
   * @param[in] value The new value.
   */
  void set_catv_rating(const StringPiece& value) {
    *MutableStorage("catvRating") = value.data();
  }

  /**
   * Determine if the '<code>catvfrRating</code>' attribute was set.
   *
   * @return true if the '<code>catvfrRating</code>' attribute was set.
   */
  bool has_catvfr_rating() const {
    return Storage().isMember("catvfrRating");
  }

  /**
   * Clears the '<code>catvfrRating</code>' attribute.
   */
  void clear_catvfr_rating() {
    MutableStorage()->removeMember("catvfrRating");
  }


  /**
   * Get the value of the '<code>catvfrRating</code>' attribute.
   */
  const StringPiece get_catvfr_rating() const {
    const Json::Value& v = Storage("catvfrRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>catvfrRating</code>' attribute.
   *
   * The video's rating from the Canadian Radio-Television and
   * Telecommunications Commission (CRTC) for Canadian French-language
   * broadcasts. For more information, see the Canadian Broadcast Standards
   * Council website.
   *
   * @param[in] value The new value.
   */
  void set_catvfr_rating(const StringPiece& value) {
    *MutableStorage("catvfrRating") = value.data();
  }

  /**
   * Determine if the '<code>cbfcRating</code>' attribute was set.
   *
   * @return true if the '<code>cbfcRating</code>' attribute was set.
   */
  bool has_cbfc_rating() const {
    return Storage().isMember("cbfcRating");
  }

  /**
   * Clears the '<code>cbfcRating</code>' attribute.
   */
  void clear_cbfc_rating() {
    MutableStorage()->removeMember("cbfcRating");
  }


  /**
   * Get the value of the '<code>cbfcRating</code>' attribute.
   */
  const StringPiece get_cbfc_rating() const {
    const Json::Value& v = Storage("cbfcRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cbfcRating</code>' attribute.
   *
   * The video's Central Board of Film Certification (CBFC - India) rating.
   *
   * @param[in] value The new value.
   */
  void set_cbfc_rating(const StringPiece& value) {
    *MutableStorage("cbfcRating") = value.data();
  }

  /**
   * Determine if the '<code>cccRating</code>' attribute was set.
   *
   * @return true if the '<code>cccRating</code>' attribute was set.
   */
  bool has_ccc_rating() const {
    return Storage().isMember("cccRating");
  }

  /**
   * Clears the '<code>cccRating</code>' attribute.
   */
  void clear_ccc_rating() {
    MutableStorage()->removeMember("cccRating");
  }


  /**
   * Get the value of the '<code>cccRating</code>' attribute.
   */
  const StringPiece get_ccc_rating() const {
    const Json::Value& v = Storage("cccRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cccRating</code>' attribute.
   *
   * The video's Consejo de Calificación Cinematográfica (Chile) rating.
   *
   * @param[in] value The new value.
   */
  void set_ccc_rating(const StringPiece& value) {
    *MutableStorage("cccRating") = value.data();
  }

  /**
   * Determine if the '<code>cceRating</code>' attribute was set.
   *
   * @return true if the '<code>cceRating</code>' attribute was set.
   */
  bool has_cce_rating() const {
    return Storage().isMember("cceRating");
  }

  /**
   * Clears the '<code>cceRating</code>' attribute.
   */
  void clear_cce_rating() {
    MutableStorage()->removeMember("cceRating");
  }


  /**
   * Get the value of the '<code>cceRating</code>' attribute.
   */
  const StringPiece get_cce_rating() const {
    const Json::Value& v = Storage("cceRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cceRating</code>' attribute.
   *
   * The video's rating from Portugal's Comissão de Classificação de
   * Espect´culos.
   *
   * @param[in] value The new value.
   */
  void set_cce_rating(const StringPiece& value) {
    *MutableStorage("cceRating") = value.data();
  }

  /**
   * Determine if the '<code>chfilmRating</code>' attribute was set.
   *
   * @return true if the '<code>chfilmRating</code>' attribute was set.
   */
  bool has_chfilm_rating() const {
    return Storage().isMember("chfilmRating");
  }

  /**
   * Clears the '<code>chfilmRating</code>' attribute.
   */
  void clear_chfilm_rating() {
    MutableStorage()->removeMember("chfilmRating");
  }


  /**
   * Get the value of the '<code>chfilmRating</code>' attribute.
   */
  const StringPiece get_chfilm_rating() const {
    const Json::Value& v = Storage("chfilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>chfilmRating</code>' attribute.
   *
   * The video's rating in Switzerland.
   *
   * @param[in] value The new value.
   */
  void set_chfilm_rating(const StringPiece& value) {
    *MutableStorage("chfilmRating") = value.data();
  }

  /**
   * Determine if the '<code>chvrsRating</code>' attribute was set.
   *
   * @return true if the '<code>chvrsRating</code>' attribute was set.
   */
  bool has_chvrs_rating() const {
    return Storage().isMember("chvrsRating");
  }

  /**
   * Clears the '<code>chvrsRating</code>' attribute.
   */
  void clear_chvrs_rating() {
    MutableStorage()->removeMember("chvrsRating");
  }


  /**
   * Get the value of the '<code>chvrsRating</code>' attribute.
   */
  const StringPiece get_chvrs_rating() const {
    const Json::Value& v = Storage("chvrsRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>chvrsRating</code>' attribute.
   *
   * The video's Canadian Home Video Rating System (CHVRS) rating.
   *
   * @param[in] value The new value.
   */
  void set_chvrs_rating(const StringPiece& value) {
    *MutableStorage("chvrsRating") = value.data();
  }

  /**
   * Determine if the '<code>cicfRating</code>' attribute was set.
   *
   * @return true if the '<code>cicfRating</code>' attribute was set.
   */
  bool has_cicf_rating() const {
    return Storage().isMember("cicfRating");
  }

  /**
   * Clears the '<code>cicfRating</code>' attribute.
   */
  void clear_cicf_rating() {
    MutableStorage()->removeMember("cicfRating");
  }


  /**
   * Get the value of the '<code>cicfRating</code>' attribute.
   */
  const StringPiece get_cicf_rating() const {
    const Json::Value& v = Storage("cicfRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cicfRating</code>' attribute.
   *
   * The video's rating from the Commission de Contrôle des Films (Belgium).
   *
   * @param[in] value The new value.
   */
  void set_cicf_rating(const StringPiece& value) {
    *MutableStorage("cicfRating") = value.data();
  }

  /**
   * Determine if the '<code>cnaRating</code>' attribute was set.
   *
   * @return true if the '<code>cnaRating</code>' attribute was set.
   */
  bool has_cna_rating() const {
    return Storage().isMember("cnaRating");
  }

  /**
   * Clears the '<code>cnaRating</code>' attribute.
   */
  void clear_cna_rating() {
    MutableStorage()->removeMember("cnaRating");
  }


  /**
   * Get the value of the '<code>cnaRating</code>' attribute.
   */
  const StringPiece get_cna_rating() const {
    const Json::Value& v = Storage("cnaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cnaRating</code>' attribute.
   *
   * The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI
   * (CNA).
   *
   * @param[in] value The new value.
   */
  void set_cna_rating(const StringPiece& value) {
    *MutableStorage("cnaRating") = value.data();
  }

  /**
   * Determine if the '<code>cncRating</code>' attribute was set.
   *
   * @return true if the '<code>cncRating</code>' attribute was set.
   */
  bool has_cnc_rating() const {
    return Storage().isMember("cncRating");
  }

  /**
   * Clears the '<code>cncRating</code>' attribute.
   */
  void clear_cnc_rating() {
    MutableStorage()->removeMember("cncRating");
  }


  /**
   * Get the value of the '<code>cncRating</code>' attribute.
   */
  const StringPiece get_cnc_rating() const {
    const Json::Value& v = Storage("cncRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cncRating</code>' attribute.
   *
   * Rating system in France - Commission de classification cinematographique.
   *
   * @param[in] value The new value.
   */
  void set_cnc_rating(const StringPiece& value) {
    *MutableStorage("cncRating") = value.data();
  }

  /**
   * Determine if the '<code>csaRating</code>' attribute was set.
   *
   * @return true if the '<code>csaRating</code>' attribute was set.
   */
  bool has_csa_rating() const {
    return Storage().isMember("csaRating");
  }

  /**
   * Clears the '<code>csaRating</code>' attribute.
   */
  void clear_csa_rating() {
    MutableStorage()->removeMember("csaRating");
  }


  /**
   * Get the value of the '<code>csaRating</code>' attribute.
   */
  const StringPiece get_csa_rating() const {
    const Json::Value& v = Storage("csaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>csaRating</code>' attribute.
   *
   * The video's rating from France's Conseil supérieur de l?audiovisuel, which
   * rates broadcast content.
   *
   * @param[in] value The new value.
   */
  void set_csa_rating(const StringPiece& value) {
    *MutableStorage("csaRating") = value.data();
  }

  /**
   * Determine if the '<code>cscfRating</code>' attribute was set.
   *
   * @return true if the '<code>cscfRating</code>' attribute was set.
   */
  bool has_cscf_rating() const {
    return Storage().isMember("cscfRating");
  }

  /**
   * Clears the '<code>cscfRating</code>' attribute.
   */
  void clear_cscf_rating() {
    MutableStorage()->removeMember("cscfRating");
  }


  /**
   * Get the value of the '<code>cscfRating</code>' attribute.
   */
  const StringPiece get_cscf_rating() const {
    const Json::Value& v = Storage("cscfRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>cscfRating</code>' attribute.
   *
   * The video's rating from Luxembourg's Commission de surveillance de la
   * classification des films (CSCF).
   *
   * @param[in] value The new value.
   */
  void set_cscf_rating(const StringPiece& value) {
    *MutableStorage("cscfRating") = value.data();
  }

  /**
   * Determine if the '<code>czfilmRating</code>' attribute was set.
   *
   * @return true if the '<code>czfilmRating</code>' attribute was set.
   */
  bool has_czfilm_rating() const {
    return Storage().isMember("czfilmRating");
  }

  /**
   * Clears the '<code>czfilmRating</code>' attribute.
   */
  void clear_czfilm_rating() {
    MutableStorage()->removeMember("czfilmRating");
  }


  /**
   * Get the value of the '<code>czfilmRating</code>' attribute.
   */
  const StringPiece get_czfilm_rating() const {
    const Json::Value& v = Storage("czfilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>czfilmRating</code>' attribute.
   *
   * The video's rating in the Czech Republic.
   *
   * @param[in] value The new value.
   */
  void set_czfilm_rating(const StringPiece& value) {
    *MutableStorage("czfilmRating") = value.data();
  }

  /**
   * Determine if the '<code>djctqRating</code>' attribute was set.
   *
   * @return true if the '<code>djctqRating</code>' attribute was set.
   */
  bool has_djctq_rating() const {
    return Storage().isMember("djctqRating");
  }

  /**
   * Clears the '<code>djctqRating</code>' attribute.
   */
  void clear_djctq_rating() {
    MutableStorage()->removeMember("djctqRating");
  }


  /**
   * Get the value of the '<code>djctqRating</code>' attribute.
   */
  const StringPiece get_djctq_rating() const {
    const Json::Value& v = Storage("djctqRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>djctqRating</code>' attribute.
   *
   * The video's Departamento de Justiça, Classificação, Qualificação e Títulos
   * (DJCQT - Brazil) rating.
   *
   * @param[in] value The new value.
   */
  void set_djctq_rating(const StringPiece& value) {
    *MutableStorage("djctqRating") = value.data();
  }

  /**
   * Determine if the '<code>djctqRatingReasons</code>' attribute was set.
   *
   * @return true if the '<code>djctqRatingReasons</code>' attribute was set.
   */
  bool has_djctq_rating_reasons() const {
    return Storage().isMember("djctqRatingReasons");
  }

  /**
   * Clears the '<code>djctqRatingReasons</code>' attribute.
   */
  void clear_djctq_rating_reasons() {
    MutableStorage()->removeMember("djctqRatingReasons");
  }


  /**
   * Get a reference to the value of the '<code>djctqRatingReasons</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_djctq_rating_reasons() const {
     const Json::Value& storage = Storage("djctqRatingReasons");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>djctqRatingReasons</code>' property.
   *
   * Reasons that explain why the video received its DJCQT (Brazil) rating.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_djctqRatingReasons() {
    Json::Value* storage = MutableStorage("djctqRatingReasons");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>eefilmRating</code>' attribute was set.
   *
   * @return true if the '<code>eefilmRating</code>' attribute was set.
   */
  bool has_eefilm_rating() const {
    return Storage().isMember("eefilmRating");
  }

  /**
   * Clears the '<code>eefilmRating</code>' attribute.
   */
  void clear_eefilm_rating() {
    MutableStorage()->removeMember("eefilmRating");
  }


  /**
   * Get the value of the '<code>eefilmRating</code>' attribute.
   */
  const StringPiece get_eefilm_rating() const {
    const Json::Value& v = Storage("eefilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>eefilmRating</code>' attribute.
   *
   * The video's rating in Estonia.
   *
   * @param[in] value The new value.
   */
  void set_eefilm_rating(const StringPiece& value) {
    *MutableStorage("eefilmRating") = value.data();
  }

  /**
   * Determine if the '<code>egfilmRating</code>' attribute was set.
   *
   * @return true if the '<code>egfilmRating</code>' attribute was set.
   */
  bool has_egfilm_rating() const {
    return Storage().isMember("egfilmRating");
  }

  /**
   * Clears the '<code>egfilmRating</code>' attribute.
   */
  void clear_egfilm_rating() {
    MutableStorage()->removeMember("egfilmRating");
  }


  /**
   * Get the value of the '<code>egfilmRating</code>' attribute.
   */
  const StringPiece get_egfilm_rating() const {
    const Json::Value& v = Storage("egfilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>egfilmRating</code>' attribute.
   *
   * The video's rating in Egypt.
   *
   * @param[in] value The new value.
   */
  void set_egfilm_rating(const StringPiece& value) {
    *MutableStorage("egfilmRating") = value.data();
  }

  /**
   * Determine if the '<code>eirinRating</code>' attribute was set.
   *
   * @return true if the '<code>eirinRating</code>' attribute was set.
   */
  bool has_eirin_rating() const {
    return Storage().isMember("eirinRating");
  }

  /**
   * Clears the '<code>eirinRating</code>' attribute.
   */
  void clear_eirin_rating() {
    MutableStorage()->removeMember("eirinRating");
  }


  /**
   * Get the value of the '<code>eirinRating</code>' attribute.
   */
  const StringPiece get_eirin_rating() const {
    const Json::Value& v = Storage("eirinRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>eirinRating</code>' attribute.
   *
   * The video's Eirin (映倫) rating. Eirin is the Japanese rating system.
   *
   * @param[in] value The new value.
   */
  void set_eirin_rating(const StringPiece& value) {
    *MutableStorage("eirinRating") = value.data();
  }

  /**
   * Determine if the '<code>fcbmRating</code>' attribute was set.
   *
   * @return true if the '<code>fcbmRating</code>' attribute was set.
   */
  bool has_fcbm_rating() const {
    return Storage().isMember("fcbmRating");
  }

  /**
   * Clears the '<code>fcbmRating</code>' attribute.
   */
  void clear_fcbm_rating() {
    MutableStorage()->removeMember("fcbmRating");
  }


  /**
   * Get the value of the '<code>fcbmRating</code>' attribute.
   */
  const StringPiece get_fcbm_rating() const {
    const Json::Value& v = Storage("fcbmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fcbmRating</code>' attribute.
   *
   * The video's rating from Malaysia's Film Censorship Board.
   *
   * @param[in] value The new value.
   */
  void set_fcbm_rating(const StringPiece& value) {
    *MutableStorage("fcbmRating") = value.data();
  }

  /**
   * Determine if the '<code>fcoRating</code>' attribute was set.
   *
   * @return true if the '<code>fcoRating</code>' attribute was set.
   */
  bool has_fco_rating() const {
    return Storage().isMember("fcoRating");
  }

  /**
   * Clears the '<code>fcoRating</code>' attribute.
   */
  void clear_fco_rating() {
    MutableStorage()->removeMember("fcoRating");
  }


  /**
   * Get the value of the '<code>fcoRating</code>' attribute.
   */
  const StringPiece get_fco_rating() const {
    const Json::Value& v = Storage("fcoRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fcoRating</code>' attribute.
   *
   * The video's rating from Hong Kong's Office for Film, Newspaper and Article
   * Administration.
   *
   * @param[in] value The new value.
   */
  void set_fco_rating(const StringPiece& value) {
    *MutableStorage("fcoRating") = value.data();
  }

  /**
   * Determine if the '<code>fmocRating</code>' attribute was set.
   *
   * @return true if the '<code>fmocRating</code>' attribute was set.
   */
  bool has_fmoc_rating() const {
    return Storage().isMember("fmocRating");
  }

  /**
   * Clears the '<code>fmocRating</code>' attribute.
   */
  void clear_fmoc_rating() {
    MutableStorage()->removeMember("fmocRating");
  }


  /**
   * Get the value of the '<code>fmocRating</code>' attribute.
   */
  const StringPiece get_fmoc_rating() const {
    const Json::Value& v = Storage("fmocRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fmocRating</code>' attribute.
   *
   * This property has been deprecated. Use the
   * contentDetails.contentRating.cncRating instead.
   *
   * @param[in] value The new value.
   */
  void set_fmoc_rating(const StringPiece& value) {
    *MutableStorage("fmocRating") = value.data();
  }

  /**
   * Determine if the '<code>fpbRating</code>' attribute was set.
   *
   * @return true if the '<code>fpbRating</code>' attribute was set.
   */
  bool has_fpb_rating() const {
    return Storage().isMember("fpbRating");
  }

  /**
   * Clears the '<code>fpbRating</code>' attribute.
   */
  void clear_fpb_rating() {
    MutableStorage()->removeMember("fpbRating");
  }


  /**
   * Get the value of the '<code>fpbRating</code>' attribute.
   */
  const StringPiece get_fpb_rating() const {
    const Json::Value& v = Storage("fpbRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fpbRating</code>' attribute.
   *
   * The video's rating from South Africa's Film and Publication Board.
   *
   * @param[in] value The new value.
   */
  void set_fpb_rating(const StringPiece& value) {
    *MutableStorage("fpbRating") = value.data();
  }

  /**
   * Determine if the '<code>fskRating</code>' attribute was set.
   *
   * @return true if the '<code>fskRating</code>' attribute was set.
   */
  bool has_fsk_rating() const {
    return Storage().isMember("fskRating");
  }

  /**
   * Clears the '<code>fskRating</code>' attribute.
   */
  void clear_fsk_rating() {
    MutableStorage()->removeMember("fskRating");
  }


  /**
   * Get the value of the '<code>fskRating</code>' attribute.
   */
  const StringPiece get_fsk_rating() const {
    const Json::Value& v = Storage("fskRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>fskRating</code>' attribute.
   *
   * The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany)
   * rating.
   *
   * @param[in] value The new value.
   */
  void set_fsk_rating(const StringPiece& value) {
    *MutableStorage("fskRating") = value.data();
  }

  /**
   * Determine if the '<code>grfilmRating</code>' attribute was set.
   *
   * @return true if the '<code>grfilmRating</code>' attribute was set.
   */
  bool has_grfilm_rating() const {
    return Storage().isMember("grfilmRating");
  }

  /**
   * Clears the '<code>grfilmRating</code>' attribute.
   */
  void clear_grfilm_rating() {
    MutableStorage()->removeMember("grfilmRating");
  }


  /**
   * Get the value of the '<code>grfilmRating</code>' attribute.
   */
  const StringPiece get_grfilm_rating() const {
    const Json::Value& v = Storage("grfilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>grfilmRating</code>' attribute.
   *
   * The video's rating in Greece.
   *
   * @param[in] value The new value.
   */
  void set_grfilm_rating(const StringPiece& value) {
    *MutableStorage("grfilmRating") = value.data();
  }

  /**
   * Determine if the '<code>icaaRating</code>' attribute was set.
   *
   * @return true if the '<code>icaaRating</code>' attribute was set.
   */
  bool has_icaa_rating() const {
    return Storage().isMember("icaaRating");
  }

  /**
   * Clears the '<code>icaaRating</code>' attribute.
   */
  void clear_icaa_rating() {
    MutableStorage()->removeMember("icaaRating");
  }


  /**
   * Get the value of the '<code>icaaRating</code>' attribute.
   */
  const StringPiece get_icaa_rating() const {
    const Json::Value& v = Storage("icaaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>icaaRating</code>' attribute.
   *
   * The video's Instituto de la Cinematografía y de las Artes Audiovisuales
   * (ICAA - Spain) rating.
   *
   * @param[in] value The new value.
   */
  void set_icaa_rating(const StringPiece& value) {
    *MutableStorage("icaaRating") = value.data();
  }

  /**
   * Determine if the '<code>ifcoRating</code>' attribute was set.
   *
   * @return true if the '<code>ifcoRating</code>' attribute was set.
   */
  bool has_ifco_rating() const {
    return Storage().isMember("ifcoRating");
  }

  /**
   * Clears the '<code>ifcoRating</code>' attribute.
   */
  void clear_ifco_rating() {
    MutableStorage()->removeMember("ifcoRating");
  }


  /**
   * Get the value of the '<code>ifcoRating</code>' attribute.
   */
  const StringPiece get_ifco_rating() const {
    const Json::Value& v = Storage("ifcoRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>ifcoRating</code>' attribute.
   *
   * The video's Irish Film Classification Office (IFCO - Ireland) rating. See
   * the IFCO website for more information.
   *
   * @param[in] value The new value.
   */
  void set_ifco_rating(const StringPiece& value) {
    *MutableStorage("ifcoRating") = value.data();
  }

  /**
   * Determine if the '<code>ilfilmRating</code>' attribute was set.
   *
   * @return true if the '<code>ilfilmRating</code>' attribute was set.
   */
  bool has_ilfilm_rating() const {
    return Storage().isMember("ilfilmRating");
  }

  /**
   * Clears the '<code>ilfilmRating</code>' attribute.
   */
  void clear_ilfilm_rating() {
    MutableStorage()->removeMember("ilfilmRating");
  }


  /**
   * Get the value of the '<code>ilfilmRating</code>' attribute.
   */
  const StringPiece get_ilfilm_rating() const {
    const Json::Value& v = Storage("ilfilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>ilfilmRating</code>' attribute.
   *
   * The video's rating in Israel.
   *
   * @param[in] value The new value.
   */
  void set_ilfilm_rating(const StringPiece& value) {
    *MutableStorage("ilfilmRating") = value.data();
  }

  /**
   * Determine if the '<code>incaaRating</code>' attribute was set.
   *
   * @return true if the '<code>incaaRating</code>' attribute was set.
   */
  bool has_incaa_rating() const {
    return Storage().isMember("incaaRating");
  }

  /**
   * Clears the '<code>incaaRating</code>' attribute.
   */
  void clear_incaa_rating() {
    MutableStorage()->removeMember("incaaRating");
  }


  /**
   * Get the value of the '<code>incaaRating</code>' attribute.
   */
  const StringPiece get_incaa_rating() const {
    const Json::Value& v = Storage("incaaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>incaaRating</code>' attribute.
   *
   * The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales -
   * Argentina) rating.
   *
   * @param[in] value The new value.
   */
  void set_incaa_rating(const StringPiece& value) {
    *MutableStorage("incaaRating") = value.data();
  }

  /**
   * Determine if the '<code>kfcbRating</code>' attribute was set.
   *
   * @return true if the '<code>kfcbRating</code>' attribute was set.
   */
  bool has_kfcb_rating() const {
    return Storage().isMember("kfcbRating");
  }

  /**
   * Clears the '<code>kfcbRating</code>' attribute.
   */
  void clear_kfcb_rating() {
    MutableStorage()->removeMember("kfcbRating");
  }


  /**
   * Get the value of the '<code>kfcbRating</code>' attribute.
   */
  const StringPiece get_kfcb_rating() const {
    const Json::Value& v = Storage("kfcbRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kfcbRating</code>' attribute.
   *
   * The video's rating from the Kenya Film Classification Board.
   *
   * @param[in] value The new value.
   */
  void set_kfcb_rating(const StringPiece& value) {
    *MutableStorage("kfcbRating") = value.data();
  }

  /**
   * Determine if the '<code>kijkwijzerRating</code>' attribute was set.
   *
   * @return true if the '<code>kijkwijzerRating</code>' attribute was set.
   */
  bool has_kijkwijzer_rating() const {
    return Storage().isMember("kijkwijzerRating");
  }

  /**
   * Clears the '<code>kijkwijzerRating</code>' attribute.
   */
  void clear_kijkwijzer_rating() {
    MutableStorage()->removeMember("kijkwijzerRating");
  }


  /**
   * Get the value of the '<code>kijkwijzerRating</code>' attribute.
   */
  const StringPiece get_kijkwijzer_rating() const {
    const Json::Value& v = Storage("kijkwijzerRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kijkwijzerRating</code>' attribute.
   *
   * voor de Classificatie van Audiovisuele Media (Netherlands).
   *
   * @param[in] value The new value.
   */
  void set_kijkwijzer_rating(const StringPiece& value) {
    *MutableStorage("kijkwijzerRating") = value.data();
  }

  /**
   * Determine if the '<code>kmrbRating</code>' attribute was set.
   *
   * @return true if the '<code>kmrbRating</code>' attribute was set.
   */
  bool has_kmrb_rating() const {
    return Storage().isMember("kmrbRating");
  }

  /**
   * Clears the '<code>kmrbRating</code>' attribute.
   */
  void clear_kmrb_rating() {
    MutableStorage()->removeMember("kmrbRating");
  }


  /**
   * Get the value of the '<code>kmrbRating</code>' attribute.
   */
  const StringPiece get_kmrb_rating() const {
    const Json::Value& v = Storage("kmrbRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kmrbRating</code>' attribute.
   *
   * The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates
   * videos in South Korea.
   *
   * @param[in] value The new value.
   */
  void set_kmrb_rating(const StringPiece& value) {
    *MutableStorage("kmrbRating") = value.data();
  }

  /**
   * Determine if the '<code>lsfRating</code>' attribute was set.
   *
   * @return true if the '<code>lsfRating</code>' attribute was set.
   */
  bool has_lsf_rating() const {
    return Storage().isMember("lsfRating");
  }

  /**
   * Clears the '<code>lsfRating</code>' attribute.
   */
  void clear_lsf_rating() {
    MutableStorage()->removeMember("lsfRating");
  }


  /**
   * Get the value of the '<code>lsfRating</code>' attribute.
   */
  const StringPiece get_lsf_rating() const {
    const Json::Value& v = Storage("lsfRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>lsfRating</code>' attribute.
   *
   * The video's rating from Indonesia's Lembaga Sensor Film.
   *
   * @param[in] value The new value.
   */
  void set_lsf_rating(const StringPiece& value) {
    *MutableStorage("lsfRating") = value.data();
  }

  /**
   * Determine if the '<code>mccaaRating</code>' attribute was set.
   *
   * @return true if the '<code>mccaaRating</code>' attribute was set.
   */
  bool has_mccaa_rating() const {
    return Storage().isMember("mccaaRating");
  }

  /**
   * Clears the '<code>mccaaRating</code>' attribute.
   */
  void clear_mccaa_rating() {
    MutableStorage()->removeMember("mccaaRating");
  }


  /**
   * Get the value of the '<code>mccaaRating</code>' attribute.
   */
  const StringPiece get_mccaa_rating() const {
    const Json::Value& v = Storage("mccaaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mccaaRating</code>' attribute.
   *
   * The video's rating from Malta's Film Age-Classification Board.
   *
   * @param[in] value The new value.
   */
  void set_mccaa_rating(const StringPiece& value) {
    *MutableStorage("mccaaRating") = value.data();
  }

  /**
   * Determine if the '<code>mccypRating</code>' attribute was set.
   *
   * @return true if the '<code>mccypRating</code>' attribute was set.
   */
  bool has_mccyp_rating() const {
    return Storage().isMember("mccypRating");
  }

  /**
   * Clears the '<code>mccypRating</code>' attribute.
   */
  void clear_mccyp_rating() {
    MutableStorage()->removeMember("mccypRating");
  }


  /**
   * Get the value of the '<code>mccypRating</code>' attribute.
   */
  const StringPiece get_mccyp_rating() const {
    const Json::Value& v = Storage("mccypRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mccypRating</code>' attribute.
   *
   * The video's rating from the Danish Film Institute's (Det Danske
   * Filminstitut) Media Council for Children and Young People.
   *
   * @param[in] value The new value.
   */
  void set_mccyp_rating(const StringPiece& value) {
    *MutableStorage("mccypRating") = value.data();
  }

  /**
   * Determine if the '<code>mdaRating</code>' attribute was set.
   *
   * @return true if the '<code>mdaRating</code>' attribute was set.
   */
  bool has_mda_rating() const {
    return Storage().isMember("mdaRating");
  }

  /**
   * Clears the '<code>mdaRating</code>' attribute.
   */
  void clear_mda_rating() {
    MutableStorage()->removeMember("mdaRating");
  }


  /**
   * Get the value of the '<code>mdaRating</code>' attribute.
   */
  const StringPiece get_mda_rating() const {
    const Json::Value& v = Storage("mdaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mdaRating</code>' attribute.
   *
   * The video's rating from Singapore's Media Development Authority (MDA) and,
   * specifically, it's Board of Film Censors (BFC).
   *
   * @param[in] value The new value.
   */
  void set_mda_rating(const StringPiece& value) {
    *MutableStorage("mdaRating") = value.data();
  }

  /**
   * Determine if the '<code>medietilsynetRating</code>' attribute was set.
   *
   * @return true if the '<code>medietilsynetRating</code>' attribute was set.
   */
  bool has_medietilsynet_rating() const {
    return Storage().isMember("medietilsynetRating");
  }

  /**
   * Clears the '<code>medietilsynetRating</code>' attribute.
   */
  void clear_medietilsynet_rating() {
    MutableStorage()->removeMember("medietilsynetRating");
  }


  /**
   * Get the value of the '<code>medietilsynetRating</code>' attribute.
   */
  const StringPiece get_medietilsynet_rating() const {
    const Json::Value& v = Storage("medietilsynetRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>medietilsynetRating</code>' attribute.
   *
   * The video's rating from Medietilsynet, the Norwegian Media Authority.
   *
   * @param[in] value The new value.
   */
  void set_medietilsynet_rating(const StringPiece& value) {
    *MutableStorage("medietilsynetRating") = value.data();
  }

  /**
   * Determine if the '<code>mekuRating</code>' attribute was set.
   *
   * @return true if the '<code>mekuRating</code>' attribute was set.
   */
  bool has_meku_rating() const {
    return Storage().isMember("mekuRating");
  }

  /**
   * Clears the '<code>mekuRating</code>' attribute.
   */
  void clear_meku_rating() {
    MutableStorage()->removeMember("mekuRating");
  }


  /**
   * Get the value of the '<code>mekuRating</code>' attribute.
   */
  const StringPiece get_meku_rating() const {
    const Json::Value& v = Storage("mekuRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mekuRating</code>' attribute.
   *
   * The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti
   * (National Audiovisual Institute).
   *
   * @param[in] value The new value.
   */
  void set_meku_rating(const StringPiece& value) {
    *MutableStorage("mekuRating") = value.data();
  }

  /**
   * Determine if the '<code>mibacRating</code>' attribute was set.
   *
   * @return true if the '<code>mibacRating</code>' attribute was set.
   */
  bool has_mibac_rating() const {
    return Storage().isMember("mibacRating");
  }

  /**
   * Clears the '<code>mibacRating</code>' attribute.
   */
  void clear_mibac_rating() {
    MutableStorage()->removeMember("mibacRating");
  }


  /**
   * Get the value of the '<code>mibacRating</code>' attribute.
   */
  const StringPiece get_mibac_rating() const {
    const Json::Value& v = Storage("mibacRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mibacRating</code>' attribute.
   *
   * The video's rating from the Ministero dei Beni e delle Attività Culturali e
   * del Turismo (Italy).
   *
   * @param[in] value The new value.
   */
  void set_mibac_rating(const StringPiece& value) {
    *MutableStorage("mibacRating") = value.data();
  }

  /**
   * Determine if the '<code>mocRating</code>' attribute was set.
   *
   * @return true if the '<code>mocRating</code>' attribute was set.
   */
  bool has_moc_rating() const {
    return Storage().isMember("mocRating");
  }

  /**
   * Clears the '<code>mocRating</code>' attribute.
   */
  void clear_moc_rating() {
    MutableStorage()->removeMember("mocRating");
  }


  /**
   * Get the value of the '<code>mocRating</code>' attribute.
   */
  const StringPiece get_moc_rating() const {
    const Json::Value& v = Storage("mocRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mocRating</code>' attribute.
   *
   * The video's Ministerio de Cultura (Colombia) rating.
   *
   * @param[in] value The new value.
   */
  void set_moc_rating(const StringPiece& value) {
    *MutableStorage("mocRating") = value.data();
  }

  /**
   * Determine if the '<code>moctwRating</code>' attribute was set.
   *
   * @return true if the '<code>moctwRating</code>' attribute was set.
   */
  bool has_moctw_rating() const {
    return Storage().isMember("moctwRating");
  }

  /**
   * Clears the '<code>moctwRating</code>' attribute.
   */
  void clear_moctw_rating() {
    MutableStorage()->removeMember("moctwRating");
  }


  /**
   * Get the value of the '<code>moctwRating</code>' attribute.
   */
  const StringPiece get_moctw_rating() const {
    const Json::Value& v = Storage("moctwRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>moctwRating</code>' attribute.
   *
   * The video's rating from Taiwan's Ministry of Culture (文化部).
   *
   * @param[in] value The new value.
   */
  void set_moctw_rating(const StringPiece& value) {
    *MutableStorage("moctwRating") = value.data();
  }

  /**
   * Determine if the '<code>mpaaRating</code>' attribute was set.
   *
   * @return true if the '<code>mpaaRating</code>' attribute was set.
   */
  bool has_mpaa_rating() const {
    return Storage().isMember("mpaaRating");
  }

  /**
   * Clears the '<code>mpaaRating</code>' attribute.
   */
  void clear_mpaa_rating() {
    MutableStorage()->removeMember("mpaaRating");
  }


  /**
   * Get the value of the '<code>mpaaRating</code>' attribute.
   */
  const StringPiece get_mpaa_rating() const {
    const Json::Value& v = Storage("mpaaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mpaaRating</code>' attribute.
   *
   * The video's Motion Picture Association of America (MPAA) rating.
   *
   * @param[in] value The new value.
   */
  void set_mpaa_rating(const StringPiece& value) {
    *MutableStorage("mpaaRating") = value.data();
  }

  /**
   * Determine if the '<code>mtrcbRating</code>' attribute was set.
   *
   * @return true if the '<code>mtrcbRating</code>' attribute was set.
   */
  bool has_mtrcb_rating() const {
    return Storage().isMember("mtrcbRating");
  }

  /**
   * Clears the '<code>mtrcbRating</code>' attribute.
   */
  void clear_mtrcb_rating() {
    MutableStorage()->removeMember("mtrcbRating");
  }


  /**
   * Get the value of the '<code>mtrcbRating</code>' attribute.
   */
  const StringPiece get_mtrcb_rating() const {
    const Json::Value& v = Storage("mtrcbRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mtrcbRating</code>' attribute.
   *
   * The video's rating from the Movie and Television Review and Classification
   * Board (Philippines).
   *
   * @param[in] value The new value.
   */
  void set_mtrcb_rating(const StringPiece& value) {
    *MutableStorage("mtrcbRating") = value.data();
  }

  /**
   * Determine if the '<code>nbcRating</code>' attribute was set.
   *
   * @return true if the '<code>nbcRating</code>' attribute was set.
   */
  bool has_nbc_rating() const {
    return Storage().isMember("nbcRating");
  }

  /**
   * Clears the '<code>nbcRating</code>' attribute.
   */
  void clear_nbc_rating() {
    MutableStorage()->removeMember("nbcRating");
  }


  /**
   * Get the value of the '<code>nbcRating</code>' attribute.
   */
  const StringPiece get_nbc_rating() const {
    const Json::Value& v = Storage("nbcRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nbcRating</code>' attribute.
   *
   * The video's rating from the Maldives National Bureau of Classification.
   *
   * @param[in] value The new value.
   */
  void set_nbc_rating(const StringPiece& value) {
    *MutableStorage("nbcRating") = value.data();
  }

  /**
   * Determine if the '<code>nbcplRating</code>' attribute was set.
   *
   * @return true if the '<code>nbcplRating</code>' attribute was set.
   */
  bool has_nbcpl_rating() const {
    return Storage().isMember("nbcplRating");
  }

  /**
   * Clears the '<code>nbcplRating</code>' attribute.
   */
  void clear_nbcpl_rating() {
    MutableStorage()->removeMember("nbcplRating");
  }


  /**
   * Get the value of the '<code>nbcplRating</code>' attribute.
   */
  const StringPiece get_nbcpl_rating() const {
    const Json::Value& v = Storage("nbcplRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nbcplRating</code>' attribute.
   *
   * The video's rating in Poland.
   *
   * @param[in] value The new value.
   */
  void set_nbcpl_rating(const StringPiece& value) {
    *MutableStorage("nbcplRating") = value.data();
  }

  /**
   * Determine if the '<code>nfrcRating</code>' attribute was set.
   *
   * @return true if the '<code>nfrcRating</code>' attribute was set.
   */
  bool has_nfrc_rating() const {
    return Storage().isMember("nfrcRating");
  }

  /**
   * Clears the '<code>nfrcRating</code>' attribute.
   */
  void clear_nfrc_rating() {
    MutableStorage()->removeMember("nfrcRating");
  }


  /**
   * Get the value of the '<code>nfrcRating</code>' attribute.
   */
  const StringPiece get_nfrc_rating() const {
    const Json::Value& v = Storage("nfrcRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nfrcRating</code>' attribute.
   *
   * The video's rating from the Bulgarian National Film Center.
   *
   * @param[in] value The new value.
   */
  void set_nfrc_rating(const StringPiece& value) {
    *MutableStorage("nfrcRating") = value.data();
  }

  /**
   * Determine if the '<code>nfvcbRating</code>' attribute was set.
   *
   * @return true if the '<code>nfvcbRating</code>' attribute was set.
   */
  bool has_nfvcb_rating() const {
    return Storage().isMember("nfvcbRating");
  }

  /**
   * Clears the '<code>nfvcbRating</code>' attribute.
   */
  void clear_nfvcb_rating() {
    MutableStorage()->removeMember("nfvcbRating");
  }


  /**
   * Get the value of the '<code>nfvcbRating</code>' attribute.
   */
  const StringPiece get_nfvcb_rating() const {
    const Json::Value& v = Storage("nfvcbRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nfvcbRating</code>' attribute.
   *
   * The video's rating from Nigeria's National Film and Video Censors Board.
   *
   * @param[in] value The new value.
   */
  void set_nfvcb_rating(const StringPiece& value) {
    *MutableStorage("nfvcbRating") = value.data();
  }

  /**
   * Determine if the '<code>nkclvRating</code>' attribute was set.
   *
   * @return true if the '<code>nkclvRating</code>' attribute was set.
   */
  bool has_nkclv_rating() const {
    return Storage().isMember("nkclvRating");
  }

  /**
   * Clears the '<code>nkclvRating</code>' attribute.
   */
  void clear_nkclv_rating() {
    MutableStorage()->removeMember("nkclvRating");
  }


  /**
   * Get the value of the '<code>nkclvRating</code>' attribute.
   */
  const StringPiece get_nkclv_rating() const {
    const Json::Value& v = Storage("nkclvRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>nkclvRating</code>' attribute.
   *
   * The video's rating from the Nacionãlais Kino centrs (National Film Centre
   * of Latvia).
   *
   * @param[in] value The new value.
   */
  void set_nkclv_rating(const StringPiece& value) {
    *MutableStorage("nkclvRating") = value.data();
  }

  /**
   * Determine if the '<code>oflcRating</code>' attribute was set.
   *
   * @return true if the '<code>oflcRating</code>' attribute was set.
   */
  bool has_oflc_rating() const {
    return Storage().isMember("oflcRating");
  }

  /**
   * Clears the '<code>oflcRating</code>' attribute.
   */
  void clear_oflc_rating() {
    MutableStorage()->removeMember("oflcRating");
  }


  /**
   * Get the value of the '<code>oflcRating</code>' attribute.
   */
  const StringPiece get_oflc_rating() const {
    const Json::Value& v = Storage("oflcRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>oflcRating</code>' attribute.
   *
   * The video's Office of Film and Literature Classification (OFLC - New
   * Zealand) rating.
   *
   * @param[in] value The new value.
   */
  void set_oflc_rating(const StringPiece& value) {
    *MutableStorage("oflcRating") = value.data();
  }

  /**
   * Determine if the '<code>pefilmRating</code>' attribute was set.
   *
   * @return true if the '<code>pefilmRating</code>' attribute was set.
   */
  bool has_pefilm_rating() const {
    return Storage().isMember("pefilmRating");
  }

  /**
   * Clears the '<code>pefilmRating</code>' attribute.
   */
  void clear_pefilm_rating() {
    MutableStorage()->removeMember("pefilmRating");
  }


  /**
   * Get the value of the '<code>pefilmRating</code>' attribute.
   */
  const StringPiece get_pefilm_rating() const {
    const Json::Value& v = Storage("pefilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>pefilmRating</code>' attribute.
   *
   * The video's rating in Peru.
   *
   * @param[in] value The new value.
   */
  void set_pefilm_rating(const StringPiece& value) {
    *MutableStorage("pefilmRating") = value.data();
  }

  /**
   * Determine if the '<code>rcnofRating</code>' attribute was set.
   *
   * @return true if the '<code>rcnofRating</code>' attribute was set.
   */
  bool has_rcnof_rating() const {
    return Storage().isMember("rcnofRating");
  }

  /**
   * Clears the '<code>rcnofRating</code>' attribute.
   */
  void clear_rcnof_rating() {
    MutableStorage()->removeMember("rcnofRating");
  }


  /**
   * Get the value of the '<code>rcnofRating</code>' attribute.
   */
  const StringPiece get_rcnof_rating() const {
    const Json::Value& v = Storage("rcnofRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>rcnofRating</code>' attribute.
   *
   * The video's rating from the Hungarian Nemzeti Filmiroda, the Rating
   * Committee of the National Office of Film.
   *
   * @param[in] value The new value.
   */
  void set_rcnof_rating(const StringPiece& value) {
    *MutableStorage("rcnofRating") = value.data();
  }

  /**
   * Determine if the '<code>resorteviolenciaRating</code>' attribute was set.
   *
   * @return true if the '<code>resorteviolenciaRating</code>' attribute was
   * set.
   */
  bool has_resorteviolencia_rating() const {
    return Storage().isMember("resorteviolenciaRating");
  }

  /**
   * Clears the '<code>resorteviolenciaRating</code>' attribute.
   */
  void clear_resorteviolencia_rating() {
    MutableStorage()->removeMember("resorteviolenciaRating");
  }


  /**
   * Get the value of the '<code>resorteviolenciaRating</code>' attribute.
   */
  const StringPiece get_resorteviolencia_rating() const {
    const Json::Value& v = Storage("resorteviolenciaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>resorteviolenciaRating</code>' attribute.
   *
   * The video's rating in Venezuela.
   *
   * @param[in] value The new value.
   */
  void set_resorteviolencia_rating(const StringPiece& value) {
    *MutableStorage("resorteviolenciaRating") = value.data();
  }

  /**
   * Determine if the '<code>rtcRating</code>' attribute was set.
   *
   * @return true if the '<code>rtcRating</code>' attribute was set.
   */
  bool has_rtc_rating() const {
    return Storage().isMember("rtcRating");
  }

  /**
   * Clears the '<code>rtcRating</code>' attribute.
   */
  void clear_rtc_rating() {
    MutableStorage()->removeMember("rtcRating");
  }


  /**
   * Get the value of the '<code>rtcRating</code>' attribute.
   */
  const StringPiece get_rtc_rating() const {
    const Json::Value& v = Storage("rtcRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>rtcRating</code>' attribute.
   *
   * The video's General Directorate of Radio, Television and Cinematography
   * (Mexico) rating.
   *
   * @param[in] value The new value.
   */
  void set_rtc_rating(const StringPiece& value) {
    *MutableStorage("rtcRating") = value.data();
  }

  /**
   * Determine if the '<code>rteRating</code>' attribute was set.
   *
   * @return true if the '<code>rteRating</code>' attribute was set.
   */
  bool has_rte_rating() const {
    return Storage().isMember("rteRating");
  }

  /**
   * Clears the '<code>rteRating</code>' attribute.
   */
  void clear_rte_rating() {
    MutableStorage()->removeMember("rteRating");
  }


  /**
   * Get the value of the '<code>rteRating</code>' attribute.
   */
  const StringPiece get_rte_rating() const {
    const Json::Value& v = Storage("rteRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>rteRating</code>' attribute.
   *
   * The video's rating from Ireland's Raidió Teilifís Éireann.
   *
   * @param[in] value The new value.
   */
  void set_rte_rating(const StringPiece& value) {
    *MutableStorage("rteRating") = value.data();
  }

  /**
   * Determine if the '<code>russiaRating</code>' attribute was set.
   *
   * @return true if the '<code>russiaRating</code>' attribute was set.
   */
  bool has_russia_rating() const {
    return Storage().isMember("russiaRating");
  }

  /**
   * Clears the '<code>russiaRating</code>' attribute.
   */
  void clear_russia_rating() {
    MutableStorage()->removeMember("russiaRating");
  }


  /**
   * Get the value of the '<code>russiaRating</code>' attribute.
   */
  const StringPiece get_russia_rating() const {
    const Json::Value& v = Storage("russiaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>russiaRating</code>' attribute.
   *
   * The video's National Film Registry of the Russian Federation (MKRF -
   * Russia) rating.
   *
   * @param[in] value The new value.
   */
  void set_russia_rating(const StringPiece& value) {
    *MutableStorage("russiaRating") = value.data();
  }

  /**
   * Determine if the '<code>skfilmRating</code>' attribute was set.
   *
   * @return true if the '<code>skfilmRating</code>' attribute was set.
   */
  bool has_skfilm_rating() const {
    return Storage().isMember("skfilmRating");
  }

  /**
   * Clears the '<code>skfilmRating</code>' attribute.
   */
  void clear_skfilm_rating() {
    MutableStorage()->removeMember("skfilmRating");
  }


  /**
   * Get the value of the '<code>skfilmRating</code>' attribute.
   */
  const StringPiece get_skfilm_rating() const {
    const Json::Value& v = Storage("skfilmRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>skfilmRating</code>' attribute.
   *
   * The video's rating in Slovakia.
   *
   * @param[in] value The new value.
   */
  void set_skfilm_rating(const StringPiece& value) {
    *MutableStorage("skfilmRating") = value.data();
  }

  /**
   * Determine if the '<code>smaisRating</code>' attribute was set.
   *
   * @return true if the '<code>smaisRating</code>' attribute was set.
   */
  bool has_smais_rating() const {
    return Storage().isMember("smaisRating");
  }

  /**
   * Clears the '<code>smaisRating</code>' attribute.
   */
  void clear_smais_rating() {
    MutableStorage()->removeMember("smaisRating");
  }


  /**
   * Get the value of the '<code>smaisRating</code>' attribute.
   */
  const StringPiece get_smais_rating() const {
    const Json::Value& v = Storage("smaisRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>smaisRating</code>' attribute.
   *
   * The video's rating in Iceland.
   *
   * @param[in] value The new value.
   */
  void set_smais_rating(const StringPiece& value) {
    *MutableStorage("smaisRating") = value.data();
  }

  /**
   * Determine if the '<code>smsaRating</code>' attribute was set.
   *
   * @return true if the '<code>smsaRating</code>' attribute was set.
   */
  bool has_smsa_rating() const {
    return Storage().isMember("smsaRating");
  }

  /**
   * Clears the '<code>smsaRating</code>' attribute.
   */
  void clear_smsa_rating() {
    MutableStorage()->removeMember("smsaRating");
  }


  /**
   * Get the value of the '<code>smsaRating</code>' attribute.
   */
  const StringPiece get_smsa_rating() const {
    const Json::Value& v = Storage("smsaRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>smsaRating</code>' attribute.
   *
   * The video's rating from Statens medieråd (Sweden's National Media Council).
   *
   * @param[in] value The new value.
   */
  void set_smsa_rating(const StringPiece& value) {
    *MutableStorage("smsaRating") = value.data();
  }

  /**
   * Determine if the '<code>tvpgRating</code>' attribute was set.
   *
   * @return true if the '<code>tvpgRating</code>' attribute was set.
   */
  bool has_tvpg_rating() const {
    return Storage().isMember("tvpgRating");
  }

  /**
   * Clears the '<code>tvpgRating</code>' attribute.
   */
  void clear_tvpg_rating() {
    MutableStorage()->removeMember("tvpgRating");
  }


  /**
   * Get the value of the '<code>tvpgRating</code>' attribute.
   */
  const StringPiece get_tvpg_rating() const {
    const Json::Value& v = Storage("tvpgRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>tvpgRating</code>' attribute.
   *
   * The video's TV Parental Guidelines (TVPG) rating.
   *
   * @param[in] value The new value.
   */
  void set_tvpg_rating(const StringPiece& value) {
    *MutableStorage("tvpgRating") = value.data();
  }

  /**
   * Determine if the '<code>ytRating</code>' attribute was set.
   *
   * @return true if the '<code>ytRating</code>' attribute was set.
   */
  bool has_yt_rating() const {
    return Storage().isMember("ytRating");
  }

  /**
   * Clears the '<code>ytRating</code>' attribute.
   */
  void clear_yt_rating() {
    MutableStorage()->removeMember("ytRating");
  }


  /**
   * Get the value of the '<code>ytRating</code>' attribute.
   */
  const StringPiece get_yt_rating() const {
    const Json::Value& v = Storage("ytRating");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>ytRating</code>' attribute.
   *
   * A rating that YouTube uses to identify age-restricted content.
   *
   * @param[in] value The new value.
   */
  void set_yt_rating(const StringPiece& value) {
    *MutableStorage("ytRating") = value.data();
  }

 private:
  void operator=(const ContentRating&);
};  // ContentRating
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_CONTENT_RATING_H_
