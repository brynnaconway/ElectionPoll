// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_SOCIAL_H_
#define  GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_SOCIAL_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/resource_id.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Details about a social network post.
 *
 * @ingroup DataObject
 */
class ActivityContentDetailsSocial : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ActivityContentDetailsSocial* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ActivityContentDetailsSocial(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ActivityContentDetailsSocial(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ActivityContentDetailsSocial();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::ActivityContentDetailsSocial</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::ActivityContentDetailsSocial");
  }

  /**
   * Determine if the '<code>author</code>' attribute was set.
   *
   * @return true if the '<code>author</code>' attribute was set.
   */
  bool has_author() const {
    return Storage().isMember("author");
  }

  /**
   * Clears the '<code>author</code>' attribute.
   */
  void clear_author() {
    MutableStorage()->removeMember("author");
  }


  /**
   * Get the value of the '<code>author</code>' attribute.
   */
  const StringPiece get_author() const {
    const Json::Value& v = Storage("author");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>author</code>' attribute.
   *
   * The author of the social network post.
   *
   * @param[in] value The new value.
   */
  void set_author(const StringPiece& value) {
    *MutableStorage("author") = value.data();
  }

  /**
   * Determine if the '<code>imageUrl</code>' attribute was set.
   *
   * @return true if the '<code>imageUrl</code>' attribute was set.
   */
  bool has_image_url() const {
    return Storage().isMember("imageUrl");
  }

  /**
   * Clears the '<code>imageUrl</code>' attribute.
   */
  void clear_image_url() {
    MutableStorage()->removeMember("imageUrl");
  }


  /**
   * Get the value of the '<code>imageUrl</code>' attribute.
   */
  const StringPiece get_image_url() const {
    const Json::Value& v = Storage("imageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>imageUrl</code>' attribute.
   *
   * An image of the post's author.
   *
   * @param[in] value The new value.
   */
  void set_image_url(const StringPiece& value) {
    *MutableStorage("imageUrl") = value.data();
  }

  /**
   * Determine if the '<code>referenceUrl</code>' attribute was set.
   *
   * @return true if the '<code>referenceUrl</code>' attribute was set.
   */
  bool has_reference_url() const {
    return Storage().isMember("referenceUrl");
  }

  /**
   * Clears the '<code>referenceUrl</code>' attribute.
   */
  void clear_reference_url() {
    MutableStorage()->removeMember("referenceUrl");
  }


  /**
   * Get the value of the '<code>referenceUrl</code>' attribute.
   */
  const StringPiece get_reference_url() const {
    const Json::Value& v = Storage("referenceUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>referenceUrl</code>' attribute.
   *
   * The URL of the social network post.
   *
   * @param[in] value The new value.
   */
  void set_reference_url(const StringPiece& value) {
    *MutableStorage("referenceUrl") = value.data();
  }

  /**
   * Determine if the '<code>resourceId</code>' attribute was set.
   *
   * @return true if the '<code>resourceId</code>' attribute was set.
   */
  bool has_resource_id() const {
    return Storage().isMember("resourceId");
  }

  /**
   * Clears the '<code>resourceId</code>' attribute.
   */
  void clear_resource_id() {
    MutableStorage()->removeMember("resourceId");
  }


  /**
   * Get a reference to the value of the '<code>resourceId</code>' attribute.
   */
  const ResourceId get_resource_id() const;

  /**
   * Gets a reference to a mutable value of the '<code>resourceId</code>'
   * property.
   *
   * The resourceId object encapsulates information that identifies the resource
   * associated with a social network post.
   *
   * @return The result can be modified to change the attribute value.
   */
  ResourceId mutable_resourceId();

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * The name of the social network.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const ActivityContentDetailsSocial&);
};  // ActivityContentDetailsSocial
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_SOCIAL_H_
