// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_PROMOTED_ITEM_H_
#define  GOOGLE_YOUTUBE_API_PROMOTED_ITEM_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/invideo_timing.h"
#include "google/youtube_api/promoted_item_id.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Describes a single promoted item.
 *
 * @ingroup DataObject
 */
class PromotedItem : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static PromotedItem* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit PromotedItem(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit PromotedItem(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~PromotedItem();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::PromotedItem</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::PromotedItem");
  }

  /**
   * Determine if the '<code>customMessage</code>' attribute was set.
   *
   * @return true if the '<code>customMessage</code>' attribute was set.
   */
  bool has_custom_message() const {
    return Storage().isMember("customMessage");
  }

  /**
   * Clears the '<code>customMessage</code>' attribute.
   */
  void clear_custom_message() {
    MutableStorage()->removeMember("customMessage");
  }


  /**
   * Get the value of the '<code>customMessage</code>' attribute.
   */
  const StringPiece get_custom_message() const {
    const Json::Value& v = Storage("customMessage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>customMessage</code>' attribute.
   *
   * A custom message to display for this promotion. This field is currently
   * ignored unless the promoted item is a website.
   *
   * @param[in] value The new value.
   */
  void set_custom_message(const StringPiece& value) {
    *MutableStorage("customMessage") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get a reference to the value of the '<code>id</code>' attribute.
   */
  const PromotedItemId get_id() const;

  /**
   * Gets a reference to a mutable value of the '<code>id</code>' property.
   *
   * Identifies the promoted item.
   *
   * @return The result can be modified to change the attribute value.
   */
  PromotedItemId mutable_id();

  /**
   * Determine if the '<code>promotedByContentOwner</code>' attribute was set.
   *
   * @return true if the '<code>promotedByContentOwner</code>' attribute was
   * set.
   */
  bool has_promoted_by_content_owner() const {
    return Storage().isMember("promotedByContentOwner");
  }

  /**
   * Clears the '<code>promotedByContentOwner</code>' attribute.
   */
  void clear_promoted_by_content_owner() {
    MutableStorage()->removeMember("promotedByContentOwner");
  }


  /**
   * Get the value of the '<code>promotedByContentOwner</code>' attribute.
   */
  bool get_promoted_by_content_owner() const {
    const Json::Value& storage = Storage("promotedByContentOwner");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>promotedByContentOwner</code>' attribute.
   *
   * If true, the content owner's name will be used when displaying the
   * promotion. This field can only be set when the update is made on behalf of
   * the content owner.
   *
   * @param[in] value The new value.
   */
  void set_promoted_by_content_owner(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("promotedByContentOwner"));
  }

  /**
   * Determine if the '<code>timing</code>' attribute was set.
   *
   * @return true if the '<code>timing</code>' attribute was set.
   */
  bool has_timing() const {
    return Storage().isMember("timing");
  }

  /**
   * Clears the '<code>timing</code>' attribute.
   */
  void clear_timing() {
    MutableStorage()->removeMember("timing");
  }


  /**
   * Get a reference to the value of the '<code>timing</code>' attribute.
   */
  const InvideoTiming get_timing() const;

  /**
   * Gets a reference to a mutable value of the '<code>timing</code>' property.
   *
   * The temporal position within the video where the promoted item will be
   * displayed. If present, it overrides the default timing.
   *
   * @return The result can be modified to change the attribute value.
   */
  InvideoTiming mutable_timing();

 private:
  void operator=(const PromotedItem&);
};  // PromotedItem
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_PROMOTED_ITEM_H_
