// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_CHANNEL_SECTION_SNIPPET_H_
#define  GOOGLE_YOUTUBE_API_CHANNEL_SECTION_SNIPPET_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/channel_section_localization.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Basic details about a channel section, including title, style and position.
 *
 * @ingroup DataObject
 */
class ChannelSectionSnippet : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ChannelSectionSnippet* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ChannelSectionSnippet(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ChannelSectionSnippet(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ChannelSectionSnippet();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::ChannelSectionSnippet</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::ChannelSectionSnippet");
  }

  /**
   * Determine if the '<code>channelId</code>' attribute was set.
   *
   * @return true if the '<code>channelId</code>' attribute was set.
   */
  bool has_channel_id() const {
    return Storage().isMember("channelId");
  }

  /**
   * Clears the '<code>channelId</code>' attribute.
   */
  void clear_channel_id() {
    MutableStorage()->removeMember("channelId");
  }


  /**
   * Get the value of the '<code>channelId</code>' attribute.
   */
  const StringPiece get_channel_id() const {
    const Json::Value& v = Storage("channelId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>channelId</code>' attribute.
   *
   * The ID that YouTube uses to uniquely identify the channel that published
   * the channel section.
   *
   * @param[in] value The new value.
   */
  void set_channel_id(const StringPiece& value) {
    *MutableStorage("channelId") = value.data();
  }

  /**
   * Determine if the '<code>defaultLanguage</code>' attribute was set.
   *
   * @return true if the '<code>defaultLanguage</code>' attribute was set.
   */
  bool has_default_language() const {
    return Storage().isMember("defaultLanguage");
  }

  /**
   * Clears the '<code>defaultLanguage</code>' attribute.
   */
  void clear_default_language() {
    MutableStorage()->removeMember("defaultLanguage");
  }


  /**
   * Get the value of the '<code>defaultLanguage</code>' attribute.
   */
  const StringPiece get_default_language() const {
    const Json::Value& v = Storage("defaultLanguage");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>defaultLanguage</code>' attribute.
   *
   * The language of the channel section's default title and description.
   *
   * @param[in] value The new value.
   */
  void set_default_language(const StringPiece& value) {
    *MutableStorage("defaultLanguage") = value.data();
  }

  /**
   * Determine if the '<code>localized</code>' attribute was set.
   *
   * @return true if the '<code>localized</code>' attribute was set.
   */
  bool has_localized() const {
    return Storage().isMember("localized");
  }

  /**
   * Clears the '<code>localized</code>' attribute.
   */
  void clear_localized() {
    MutableStorage()->removeMember("localized");
  }


  /**
   * Get a reference to the value of the '<code>localized</code>' attribute.
   */
  const ChannelSectionLocalization get_localized() const;

  /**
   * Gets a reference to a mutable value of the '<code>localized</code>'
   * property.
   *
   * Localized title, read-only.
   *
   * @return The result can be modified to change the attribute value.
   */
  ChannelSectionLocalization mutable_localized();

  /**
   * Determine if the '<code>position</code>' attribute was set.
   *
   * @return true if the '<code>position</code>' attribute was set.
   */
  bool has_position() const {
    return Storage().isMember("position");
  }

  /**
   * Clears the '<code>position</code>' attribute.
   */
  void clear_position() {
    MutableStorage()->removeMember("position");
  }


  /**
   * Get the value of the '<code>position</code>' attribute.
   */
  uint32 get_position() const {
    const Json::Value& storage = Storage("position");
    return client::JsonValueToCppValueHelper<uint32 >(storage);
  }

  /**
   * Change the '<code>position</code>' attribute.
   *
   * The position of the channel section in the channel.
   *
   * @param[in] value The new value.
   */
  void set_position(uint32 value) {
    client::SetJsonValueFromCppValueHelper<uint32 >(
      value, MutableStorage("position"));
  }

  /**
   * Determine if the '<code>style</code>' attribute was set.
   *
   * @return true if the '<code>style</code>' attribute was set.
   */
  bool has_style() const {
    return Storage().isMember("style");
  }

  /**
   * Clears the '<code>style</code>' attribute.
   */
  void clear_style() {
    MutableStorage()->removeMember("style");
  }


  /**
   * Get the value of the '<code>style</code>' attribute.
   */
  const StringPiece get_style() const {
    const Json::Value& v = Storage("style");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>style</code>' attribute.
   *
   * The style of the channel section.
   *
   * @param[in] value The new value.
   */
  void set_style(const StringPiece& value) {
    *MutableStorage("style") = value.data();
  }

  /**
   * Determine if the '<code>title</code>' attribute was set.
   *
   * @return true if the '<code>title</code>' attribute was set.
   */
  bool has_title() const {
    return Storage().isMember("title");
  }

  /**
   * Clears the '<code>title</code>' attribute.
   */
  void clear_title() {
    MutableStorage()->removeMember("title");
  }


  /**
   * Get the value of the '<code>title</code>' attribute.
   */
  const StringPiece get_title() const {
    const Json::Value& v = Storage("title");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>title</code>' attribute.
   *
   * The channel section's title for multiple_playlists and multiple_channels.
   *
   * @param[in] value The new value.
   */
  void set_title(const StringPiece& value) {
    *MutableStorage("title") = value.data();
  }

  /**
   * Determine if the '<code>type</code>' attribute was set.
   *
   * @return true if the '<code>type</code>' attribute was set.
   */
  bool has_type() const {
    return Storage().isMember("type");
  }

  /**
   * Clears the '<code>type</code>' attribute.
   */
  void clear_type() {
    MutableStorage()->removeMember("type");
  }


  /**
   * Get the value of the '<code>type</code>' attribute.
   */
  const StringPiece get_type() const {
    const Json::Value& v = Storage("type");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>type</code>' attribute.
   *
   * The type of the channel section.
   *
   * @param[in] value The new value.
   */
  void set_type(const StringPiece& value) {
    *MutableStorage("type") = value.data();
  }

 private:
  void operator=(const ChannelSectionSnippet&);
};  // ChannelSectionSnippet
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_CHANNEL_SECTION_SNIPPET_H_
