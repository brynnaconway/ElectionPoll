// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_GEO_POINT_H_
#define  GOOGLE_YOUTUBE_API_GEO_POINT_H_

#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Geographical coordinates of a point, in WGS84.
 *
 * @ingroup DataObject
 */
class GeoPoint : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static GeoPoint* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeoPoint(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit GeoPoint(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~GeoPoint();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::GeoPoint</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::GeoPoint");
  }

  /**
   * Determine if the '<code>altitude</code>' attribute was set.
   *
   * @return true if the '<code>altitude</code>' attribute was set.
   */
  bool has_altitude() const {
    return Storage().isMember("altitude");
  }

  /**
   * Clears the '<code>altitude</code>' attribute.
   */
  void clear_altitude() {
    MutableStorage()->removeMember("altitude");
  }


  /**
   * Get the value of the '<code>altitude</code>' attribute.
   */
  double get_altitude() const {
    const Json::Value& storage = Storage("altitude");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>altitude</code>' attribute.
   *
   * Altitude above the reference ellipsoid, in meters.
   *
   * @param[in] value The new value.
   */
  void set_altitude(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("altitude"));
  }

  /**
   * Determine if the '<code>latitude</code>' attribute was set.
   *
   * @return true if the '<code>latitude</code>' attribute was set.
   */
  bool has_latitude() const {
    return Storage().isMember("latitude");
  }

  /**
   * Clears the '<code>latitude</code>' attribute.
   */
  void clear_latitude() {
    MutableStorage()->removeMember("latitude");
  }


  /**
   * Get the value of the '<code>latitude</code>' attribute.
   */
  double get_latitude() const {
    const Json::Value& storage = Storage("latitude");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>latitude</code>' attribute.
   *
   * Latitude in degrees.
   *
   * @param[in] value The new value.
   */
  void set_latitude(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("latitude"));
  }

  /**
   * Determine if the '<code>longitude</code>' attribute was set.
   *
   * @return true if the '<code>longitude</code>' attribute was set.
   */
  bool has_longitude() const {
    return Storage().isMember("longitude");
  }

  /**
   * Clears the '<code>longitude</code>' attribute.
   */
  void clear_longitude() {
    MutableStorage()->removeMember("longitude");
  }


  /**
   * Get the value of the '<code>longitude</code>' attribute.
   */
  double get_longitude() const {
    const Json::Value& storage = Storage("longitude");
    return client::JsonValueToCppValueHelper<double >(storage);
  }

  /**
   * Change the '<code>longitude</code>' attribute.
   *
   * Longitude in degrees.
   *
   * @param[in] value The new value.
   */
  void set_longitude(double value) {
    client::SetJsonValueFromCppValueHelper<double >(
      value, MutableStorage("longitude"));
  }

 private:
  void operator=(const GeoPoint&);
};  // GeoPoint
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_GEO_POINT_H_
