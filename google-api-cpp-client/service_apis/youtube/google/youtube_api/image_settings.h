// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_IMAGE_SETTINGS_H_
#define  GOOGLE_YOUTUBE_API_IMAGE_SETTINGS_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/localized_property.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Branding properties for images associated with the channel.
 *
 * @ingroup DataObject
 */
class ImageSettings : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ImageSettings* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ImageSettings(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ImageSettings(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ImageSettings();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::ImageSettings</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::ImageSettings");
  }

  /**
   * Determine if the '<code>backgroundImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>backgroundImageUrl</code>' attribute was set.
   */
  bool has_background_image_url() const {
    return Storage().isMember("backgroundImageUrl");
  }

  /**
   * Clears the '<code>backgroundImageUrl</code>' attribute.
   */
  void clear_background_image_url() {
    MutableStorage()->removeMember("backgroundImageUrl");
  }


  /**
   * Get a reference to the value of the '<code>backgroundImageUrl</code>'
   * attribute.
   */
  const LocalizedProperty get_background_image_url() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>backgroundImageUrl</code>' property.
   *
   * The URL for the background image shown on the video watch page. The image
   * should be 1200px by 615px, with a maximum file size of 128k.
   *
   * @return The result can be modified to change the attribute value.
   */
  LocalizedProperty mutable_backgroundImageUrl();

  /**
   * Determine if the '<code>bannerExternalUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerExternalUrl</code>' attribute was set.
   */
  bool has_banner_external_url() const {
    return Storage().isMember("bannerExternalUrl");
  }

  /**
   * Clears the '<code>bannerExternalUrl</code>' attribute.
   */
  void clear_banner_external_url() {
    MutableStorage()->removeMember("bannerExternalUrl");
  }


  /**
   * Get the value of the '<code>bannerExternalUrl</code>' attribute.
   */
  const StringPiece get_banner_external_url() const {
    const Json::Value& v = Storage("bannerExternalUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerExternalUrl</code>' attribute.
   *
   * This is used only in update requests; if it's set, we use this URL to
   * generate all of the above banner URLs.
   *
   * @param[in] value The new value.
   */
  void set_banner_external_url(const StringPiece& value) {
    *MutableStorage("bannerExternalUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerImageUrl</code>' attribute was set.
   */
  bool has_banner_image_url() const {
    return Storage().isMember("bannerImageUrl");
  }

  /**
   * Clears the '<code>bannerImageUrl</code>' attribute.
   */
  void clear_banner_image_url() {
    MutableStorage()->removeMember("bannerImageUrl");
  }


  /**
   * Get the value of the '<code>bannerImageUrl</code>' attribute.
   */
  const StringPiece get_banner_image_url() const {
    const Json::Value& v = Storage("bannerImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerImageUrl</code>' attribute.
   *
   * Banner image. Desktop size (1060x175).
   *
   * @param[in] value The new value.
   */
  void set_banner_image_url(const StringPiece& value) {
    *MutableStorage("bannerImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerMobileExtraHdImageUrl</code>' attribute was
   * set.
   *
   * @return true if the '<code>bannerMobileExtraHdImageUrl</code>' attribute
   * was set.
   */
  bool has_banner_mobile_extra_hd_image_url() const {
    return Storage().isMember("bannerMobileExtraHdImageUrl");
  }

  /**
   * Clears the '<code>bannerMobileExtraHdImageUrl</code>' attribute.
   */
  void clear_banner_mobile_extra_hd_image_url() {
    MutableStorage()->removeMember("bannerMobileExtraHdImageUrl");
  }


  /**
   * Get the value of the '<code>bannerMobileExtraHdImageUrl</code>' attribute.
   */
  const StringPiece get_banner_mobile_extra_hd_image_url() const {
    const Json::Value& v = Storage("bannerMobileExtraHdImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerMobileExtraHdImageUrl</code>' attribute.
   *
   * Banner image. Mobile size high resolution (1440x395).
   *
   * @param[in] value The new value.
   */
  void set_banner_mobile_extra_hd_image_url(const StringPiece& value) {
    *MutableStorage("bannerMobileExtraHdImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerMobileHdImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerMobileHdImageUrl</code>' attribute was
   * set.
   */
  bool has_banner_mobile_hd_image_url() const {
    return Storage().isMember("bannerMobileHdImageUrl");
  }

  /**
   * Clears the '<code>bannerMobileHdImageUrl</code>' attribute.
   */
  void clear_banner_mobile_hd_image_url() {
    MutableStorage()->removeMember("bannerMobileHdImageUrl");
  }


  /**
   * Get the value of the '<code>bannerMobileHdImageUrl</code>' attribute.
   */
  const StringPiece get_banner_mobile_hd_image_url() const {
    const Json::Value& v = Storage("bannerMobileHdImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerMobileHdImageUrl</code>' attribute.
   *
   * Banner image. Mobile size high resolution (1280x360).
   *
   * @param[in] value The new value.
   */
  void set_banner_mobile_hd_image_url(const StringPiece& value) {
    *MutableStorage("bannerMobileHdImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerMobileImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerMobileImageUrl</code>' attribute was set.
   */
  bool has_banner_mobile_image_url() const {
    return Storage().isMember("bannerMobileImageUrl");
  }

  /**
   * Clears the '<code>bannerMobileImageUrl</code>' attribute.
   */
  void clear_banner_mobile_image_url() {
    MutableStorage()->removeMember("bannerMobileImageUrl");
  }


  /**
   * Get the value of the '<code>bannerMobileImageUrl</code>' attribute.
   */
  const StringPiece get_banner_mobile_image_url() const {
    const Json::Value& v = Storage("bannerMobileImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerMobileImageUrl</code>' attribute.
   *
   * Banner image. Mobile size (640x175).
   *
   * @param[in] value The new value.
   */
  void set_banner_mobile_image_url(const StringPiece& value) {
    *MutableStorage("bannerMobileImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerMobileLowImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerMobileLowImageUrl</code>' attribute was
   * set.
   */
  bool has_banner_mobile_low_image_url() const {
    return Storage().isMember("bannerMobileLowImageUrl");
  }

  /**
   * Clears the '<code>bannerMobileLowImageUrl</code>' attribute.
   */
  void clear_banner_mobile_low_image_url() {
    MutableStorage()->removeMember("bannerMobileLowImageUrl");
  }


  /**
   * Get the value of the '<code>bannerMobileLowImageUrl</code>' attribute.
   */
  const StringPiece get_banner_mobile_low_image_url() const {
    const Json::Value& v = Storage("bannerMobileLowImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerMobileLowImageUrl</code>' attribute.
   *
   * Banner image. Mobile size low resolution (320x88).
   *
   * @param[in] value The new value.
   */
  void set_banner_mobile_low_image_url(const StringPiece& value) {
    *MutableStorage("bannerMobileLowImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerMobileMediumHdImageUrl</code>' attribute was
   * set.
   *
   * @return true if the '<code>bannerMobileMediumHdImageUrl</code>' attribute
   * was set.
   */
  bool has_banner_mobile_medium_hd_image_url() const {
    return Storage().isMember("bannerMobileMediumHdImageUrl");
  }

  /**
   * Clears the '<code>bannerMobileMediumHdImageUrl</code>' attribute.
   */
  void clear_banner_mobile_medium_hd_image_url() {
    MutableStorage()->removeMember("bannerMobileMediumHdImageUrl");
  }


  /**
   * Get the value of the '<code>bannerMobileMediumHdImageUrl</code>' attribute.
   */
  const StringPiece get_banner_mobile_medium_hd_image_url() const {
    const Json::Value& v = Storage("bannerMobileMediumHdImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerMobileMediumHdImageUrl</code>' attribute.
   *
   * Banner image. Mobile size medium/high resolution (960x263).
   *
   * @param[in] value The new value.
   */
  void set_banner_mobile_medium_hd_image_url(const StringPiece& value) {
    *MutableStorage("bannerMobileMediumHdImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTabletExtraHdImageUrl</code>' attribute was
   * set.
   *
   * @return true if the '<code>bannerTabletExtraHdImageUrl</code>' attribute
   * was set.
   */
  bool has_banner_tablet_extra_hd_image_url() const {
    return Storage().isMember("bannerTabletExtraHdImageUrl");
  }

  /**
   * Clears the '<code>bannerTabletExtraHdImageUrl</code>' attribute.
   */
  void clear_banner_tablet_extra_hd_image_url() {
    MutableStorage()->removeMember("bannerTabletExtraHdImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTabletExtraHdImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tablet_extra_hd_image_url() const {
    const Json::Value& v = Storage("bannerTabletExtraHdImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTabletExtraHdImageUrl</code>' attribute.
   *
   * Banner image. Tablet size extra high resolution (2560x424).
   *
   * @param[in] value The new value.
   */
  void set_banner_tablet_extra_hd_image_url(const StringPiece& value) {
    *MutableStorage("bannerTabletExtraHdImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTabletHdImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerTabletHdImageUrl</code>' attribute was
   * set.
   */
  bool has_banner_tablet_hd_image_url() const {
    return Storage().isMember("bannerTabletHdImageUrl");
  }

  /**
   * Clears the '<code>bannerTabletHdImageUrl</code>' attribute.
   */
  void clear_banner_tablet_hd_image_url() {
    MutableStorage()->removeMember("bannerTabletHdImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTabletHdImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tablet_hd_image_url() const {
    const Json::Value& v = Storage("bannerTabletHdImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTabletHdImageUrl</code>' attribute.
   *
   * Banner image. Tablet size high resolution (2276x377).
   *
   * @param[in] value The new value.
   */
  void set_banner_tablet_hd_image_url(const StringPiece& value) {
    *MutableStorage("bannerTabletHdImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTabletImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerTabletImageUrl</code>' attribute was set.
   */
  bool has_banner_tablet_image_url() const {
    return Storage().isMember("bannerTabletImageUrl");
  }

  /**
   * Clears the '<code>bannerTabletImageUrl</code>' attribute.
   */
  void clear_banner_tablet_image_url() {
    MutableStorage()->removeMember("bannerTabletImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTabletImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tablet_image_url() const {
    const Json::Value& v = Storage("bannerTabletImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTabletImageUrl</code>' attribute.
   *
   * Banner image. Tablet size (1707x283).
   *
   * @param[in] value The new value.
   */
  void set_banner_tablet_image_url(const StringPiece& value) {
    *MutableStorage("bannerTabletImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTabletLowImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerTabletLowImageUrl</code>' attribute was
   * set.
   */
  bool has_banner_tablet_low_image_url() const {
    return Storage().isMember("bannerTabletLowImageUrl");
  }

  /**
   * Clears the '<code>bannerTabletLowImageUrl</code>' attribute.
   */
  void clear_banner_tablet_low_image_url() {
    MutableStorage()->removeMember("bannerTabletLowImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTabletLowImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tablet_low_image_url() const {
    const Json::Value& v = Storage("bannerTabletLowImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTabletLowImageUrl</code>' attribute.
   *
   * Banner image. Tablet size low resolution (1138x188).
   *
   * @param[in] value The new value.
   */
  void set_banner_tablet_low_image_url(const StringPiece& value) {
    *MutableStorage("bannerTabletLowImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTvHighImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerTvHighImageUrl</code>' attribute was set.
   */
  bool has_banner_tv_high_image_url() const {
    return Storage().isMember("bannerTvHighImageUrl");
  }

  /**
   * Clears the '<code>bannerTvHighImageUrl</code>' attribute.
   */
  void clear_banner_tv_high_image_url() {
    MutableStorage()->removeMember("bannerTvHighImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTvHighImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tv_high_image_url() const {
    const Json::Value& v = Storage("bannerTvHighImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTvHighImageUrl</code>' attribute.
   *
   * Banner image. TV size high resolution (1920x1080).
   *
   * @param[in] value The new value.
   */
  void set_banner_tv_high_image_url(const StringPiece& value) {
    *MutableStorage("bannerTvHighImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTvImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerTvImageUrl</code>' attribute was set.
   */
  bool has_banner_tv_image_url() const {
    return Storage().isMember("bannerTvImageUrl");
  }

  /**
   * Clears the '<code>bannerTvImageUrl</code>' attribute.
   */
  void clear_banner_tv_image_url() {
    MutableStorage()->removeMember("bannerTvImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTvImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tv_image_url() const {
    const Json::Value& v = Storage("bannerTvImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTvImageUrl</code>' attribute.
   *
   * Banner image. TV size extra high resolution (2120x1192).
   *
   * @param[in] value The new value.
   */
  void set_banner_tv_image_url(const StringPiece& value) {
    *MutableStorage("bannerTvImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTvLowImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerTvLowImageUrl</code>' attribute was set.
   */
  bool has_banner_tv_low_image_url() const {
    return Storage().isMember("bannerTvLowImageUrl");
  }

  /**
   * Clears the '<code>bannerTvLowImageUrl</code>' attribute.
   */
  void clear_banner_tv_low_image_url() {
    MutableStorage()->removeMember("bannerTvLowImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTvLowImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tv_low_image_url() const {
    const Json::Value& v = Storage("bannerTvLowImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTvLowImageUrl</code>' attribute.
   *
   * Banner image. TV size low resolution (854x480).
   *
   * @param[in] value The new value.
   */
  void set_banner_tv_low_image_url(const StringPiece& value) {
    *MutableStorage("bannerTvLowImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>bannerTvMediumImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>bannerTvMediumImageUrl</code>' attribute was
   * set.
   */
  bool has_banner_tv_medium_image_url() const {
    return Storage().isMember("bannerTvMediumImageUrl");
  }

  /**
   * Clears the '<code>bannerTvMediumImageUrl</code>' attribute.
   */
  void clear_banner_tv_medium_image_url() {
    MutableStorage()->removeMember("bannerTvMediumImageUrl");
  }


  /**
   * Get the value of the '<code>bannerTvMediumImageUrl</code>' attribute.
   */
  const StringPiece get_banner_tv_medium_image_url() const {
    const Json::Value& v = Storage("bannerTvMediumImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>bannerTvMediumImageUrl</code>' attribute.
   *
   * Banner image. TV size medium resolution (1280x720).
   *
   * @param[in] value The new value.
   */
  void set_banner_tv_medium_image_url(const StringPiece& value) {
    *MutableStorage("bannerTvMediumImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>largeBrandedBannerImageImapScript</code>' attribute
   * was set.
   *
   * @return true if the '<code>largeBrandedBannerImageImapScript</code>'
   * attribute was set.
   */
  bool has_large_branded_banner_image_imap_script() const {
    return Storage().isMember("largeBrandedBannerImageImapScript");
  }

  /**
   * Clears the '<code>largeBrandedBannerImageImapScript</code>' attribute.
   */
  void clear_large_branded_banner_image_imap_script() {
    MutableStorage()->removeMember("largeBrandedBannerImageImapScript");
  }


  /**
   * Get a reference to the value of the
   * '<code>largeBrandedBannerImageImapScript</code>' attribute.
   */
  const LocalizedProperty get_large_branded_banner_image_imap_script() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>largeBrandedBannerImageImapScript</code>' property.
   *
   * The image map script for the large banner image.
   *
   * @return The result can be modified to change the attribute value.
   */
  LocalizedProperty mutable_largeBrandedBannerImageImapScript();

  /**
   * Determine if the '<code>largeBrandedBannerImageUrl</code>' attribute was
   * set.
   *
   * @return true if the '<code>largeBrandedBannerImageUrl</code>' attribute was
   * set.
   */
  bool has_large_branded_banner_image_url() const {
    return Storage().isMember("largeBrandedBannerImageUrl");
  }

  /**
   * Clears the '<code>largeBrandedBannerImageUrl</code>' attribute.
   */
  void clear_large_branded_banner_image_url() {
    MutableStorage()->removeMember("largeBrandedBannerImageUrl");
  }


  /**
   * Get a reference to the value of the
   * '<code>largeBrandedBannerImageUrl</code>' attribute.
   */
  const LocalizedProperty get_large_branded_banner_image_url() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>largeBrandedBannerImageUrl</code>' property.
   *
   * The URL for the 854px by 70px image that appears below the video player in
   * the expanded video view of the video watch page.
   *
   * @return The result can be modified to change the attribute value.
   */
  LocalizedProperty mutable_largeBrandedBannerImageUrl();

  /**
   * Determine if the '<code>smallBrandedBannerImageImapScript</code>' attribute
   * was set.
   *
   * @return true if the '<code>smallBrandedBannerImageImapScript</code>'
   * attribute was set.
   */
  bool has_small_branded_banner_image_imap_script() const {
    return Storage().isMember("smallBrandedBannerImageImapScript");
  }

  /**
   * Clears the '<code>smallBrandedBannerImageImapScript</code>' attribute.
   */
  void clear_small_branded_banner_image_imap_script() {
    MutableStorage()->removeMember("smallBrandedBannerImageImapScript");
  }


  /**
   * Get a reference to the value of the
   * '<code>smallBrandedBannerImageImapScript</code>' attribute.
   */
  const LocalizedProperty get_small_branded_banner_image_imap_script() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>smallBrandedBannerImageImapScript</code>' property.
   *
   * The image map script for the small banner image.
   *
   * @return The result can be modified to change the attribute value.
   */
  LocalizedProperty mutable_smallBrandedBannerImageImapScript();

  /**
   * Determine if the '<code>smallBrandedBannerImageUrl</code>' attribute was
   * set.
   *
   * @return true if the '<code>smallBrandedBannerImageUrl</code>' attribute was
   * set.
   */
  bool has_small_branded_banner_image_url() const {
    return Storage().isMember("smallBrandedBannerImageUrl");
  }

  /**
   * Clears the '<code>smallBrandedBannerImageUrl</code>' attribute.
   */
  void clear_small_branded_banner_image_url() {
    MutableStorage()->removeMember("smallBrandedBannerImageUrl");
  }


  /**
   * Get a reference to the value of the
   * '<code>smallBrandedBannerImageUrl</code>' attribute.
   */
  const LocalizedProperty get_small_branded_banner_image_url() const;

  /**
   * Gets a reference to a mutable value of the
   * '<code>smallBrandedBannerImageUrl</code>' property.
   *
   * The URL for the 640px by 70px banner image that appears below the video
   * player in the default view of the video watch page.
   *
   * @return The result can be modified to change the attribute value.
   */
  LocalizedProperty mutable_smallBrandedBannerImageUrl();

  /**
   * Determine if the '<code>trackingImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>trackingImageUrl</code>' attribute was set.
   */
  bool has_tracking_image_url() const {
    return Storage().isMember("trackingImageUrl");
  }

  /**
   * Clears the '<code>trackingImageUrl</code>' attribute.
   */
  void clear_tracking_image_url() {
    MutableStorage()->removeMember("trackingImageUrl");
  }


  /**
   * Get the value of the '<code>trackingImageUrl</code>' attribute.
   */
  const StringPiece get_tracking_image_url() const {
    const Json::Value& v = Storage("trackingImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>trackingImageUrl</code>' attribute.
   *
   * The URL for a 1px by 1px tracking pixel that can be used to collect
   * statistics for views of the channel or video pages.
   *
   * @param[in] value The new value.
   */
  void set_tracking_image_url(const StringPiece& value) {
    *MutableStorage("trackingImageUrl") = value.data();
  }

  /**
   * Determine if the '<code>watchIconImageUrl</code>' attribute was set.
   *
   * @return true if the '<code>watchIconImageUrl</code>' attribute was set.
   */
  bool has_watch_icon_image_url() const {
    return Storage().isMember("watchIconImageUrl");
  }

  /**
   * Clears the '<code>watchIconImageUrl</code>' attribute.
   */
  void clear_watch_icon_image_url() {
    MutableStorage()->removeMember("watchIconImageUrl");
  }


  /**
   * Get the value of the '<code>watchIconImageUrl</code>' attribute.
   */
  const StringPiece get_watch_icon_image_url() const {
    const Json::Value& v = Storage("watchIconImageUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>watchIconImageUrl</code>' attribute.
   *
   * The URL for the image that appears above the top-left corner of the video
   * player. This is a 25-pixel-high image with a flexible width that cannot
   * exceed 170 pixels.
   *
   * @param[in] value The new value.
   */
  void set_watch_icon_image_url(const StringPiece& value) {
    *MutableStorage("watchIconImageUrl") = value.data();
  }

 private:
  void operator=(const ImageSettings&);
};  // ImageSettings
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_IMAGE_SETTINGS_H_
