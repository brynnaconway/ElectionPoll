// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_VIDEO_STATUS_H_
#define  GOOGLE_YOUTUBE_API_VIDEO_STATUS_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Basic details about a video category, such as its localized title.
 *
 * @ingroup DataObject
 */
class VideoStatus : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static VideoStatus* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoStatus(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit VideoStatus(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~VideoStatus();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::VideoStatus</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::VideoStatus");
  }

  /**
   * Determine if the '<code>embeddable</code>' attribute was set.
   *
   * @return true if the '<code>embeddable</code>' attribute was set.
   */
  bool has_embeddable() const {
    return Storage().isMember("embeddable");
  }

  /**
   * Clears the '<code>embeddable</code>' attribute.
   */
  void clear_embeddable() {
    MutableStorage()->removeMember("embeddable");
  }


  /**
   * Get the value of the '<code>embeddable</code>' attribute.
   */
  bool get_embeddable() const {
    const Json::Value& storage = Storage("embeddable");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>embeddable</code>' attribute.
   *
   * This value indicates if the video can be embedded on another website.
   *
   * @param[in] value The new value.
   */
  void set_embeddable(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("embeddable"));
  }

  /**
   * Determine if the '<code>failureReason</code>' attribute was set.
   *
   * @return true if the '<code>failureReason</code>' attribute was set.
   */
  bool has_failure_reason() const {
    return Storage().isMember("failureReason");
  }

  /**
   * Clears the '<code>failureReason</code>' attribute.
   */
  void clear_failure_reason() {
    MutableStorage()->removeMember("failureReason");
  }


  /**
   * Get the value of the '<code>failureReason</code>' attribute.
   */
  const StringPiece get_failure_reason() const {
    const Json::Value& v = Storage("failureReason");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>failureReason</code>' attribute.
   *
   * This value explains why a video failed to upload. This property is only
   * present if the uploadStatus property indicates that the upload failed.
   *
   * @param[in] value The new value.
   */
  void set_failure_reason(const StringPiece& value) {
    *MutableStorage("failureReason") = value.data();
  }

  /**
   * Determine if the '<code>license</code>' attribute was set.
   *
   * @return true if the '<code>license</code>' attribute was set.
   */
  bool has_license() const {
    return Storage().isMember("license");
  }

  /**
   * Clears the '<code>license</code>' attribute.
   */
  void clear_license() {
    MutableStorage()->removeMember("license");
  }


  /**
   * Get the value of the '<code>license</code>' attribute.
   */
  const StringPiece get_license() const {
    const Json::Value& v = Storage("license");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>license</code>' attribute.
   *
   * The video's license.
   *
   * @param[in] value The new value.
   */
  void set_license(const StringPiece& value) {
    *MutableStorage("license") = value.data();
  }

  /**
   * Determine if the '<code>privacyStatus</code>' attribute was set.
   *
   * @return true if the '<code>privacyStatus</code>' attribute was set.
   */
  bool has_privacy_status() const {
    return Storage().isMember("privacyStatus");
  }

  /**
   * Clears the '<code>privacyStatus</code>' attribute.
   */
  void clear_privacy_status() {
    MutableStorage()->removeMember("privacyStatus");
  }


  /**
   * Get the value of the '<code>privacyStatus</code>' attribute.
   */
  const StringPiece get_privacy_status() const {
    const Json::Value& v = Storage("privacyStatus");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>privacyStatus</code>' attribute.
   *
   * The video's privacy status.
   *
   * @param[in] value The new value.
   */
  void set_privacy_status(const StringPiece& value) {
    *MutableStorage("privacyStatus") = value.data();
  }

  /**
   * Determine if the '<code>publicStatsViewable</code>' attribute was set.
   *
   * @return true if the '<code>publicStatsViewable</code>' attribute was set.
   */
  bool has_public_stats_viewable() const {
    return Storage().isMember("publicStatsViewable");
  }

  /**
   * Clears the '<code>publicStatsViewable</code>' attribute.
   */
  void clear_public_stats_viewable() {
    MutableStorage()->removeMember("publicStatsViewable");
  }


  /**
   * Get the value of the '<code>publicStatsViewable</code>' attribute.
   */
  bool get_public_stats_viewable() const {
    const Json::Value& storage = Storage("publicStatsViewable");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>publicStatsViewable</code>' attribute.
   *
   * This value indicates if the extended video statistics on the watch page can
   * be viewed by everyone. Note that the view count, likes, etc will still be
   * visible if this is disabled.
   *
   * @param[in] value The new value.
   */
  void set_public_stats_viewable(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("publicStatsViewable"));
  }

  /**
   * Determine if the '<code>publishAt</code>' attribute was set.
   *
   * @return true if the '<code>publishAt</code>' attribute was set.
   */
  bool has_publish_at() const {
    return Storage().isMember("publishAt");
  }

  /**
   * Clears the '<code>publishAt</code>' attribute.
   */
  void clear_publish_at() {
    MutableStorage()->removeMember("publishAt");
  }


  /**
   * Get the value of the '<code>publishAt</code>' attribute.
   */
  client::DateTime get_publish_at() const {
    const Json::Value& storage = Storage("publishAt");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>publishAt</code>' attribute.
   *
   * The date and time when the video is scheduled to publish. It can be set
   * only if the privacy status of the video is private. The value is specified
   * in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.
   *
   * @param[in] value The new value.
   */
  void set_publish_at(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("publishAt"));
  }

  /**
   * Determine if the '<code>rejectionReason</code>' attribute was set.
   *
   * @return true if the '<code>rejectionReason</code>' attribute was set.
   */
  bool has_rejection_reason() const {
    return Storage().isMember("rejectionReason");
  }

  /**
   * Clears the '<code>rejectionReason</code>' attribute.
   */
  void clear_rejection_reason() {
    MutableStorage()->removeMember("rejectionReason");
  }


  /**
   * Get the value of the '<code>rejectionReason</code>' attribute.
   */
  const StringPiece get_rejection_reason() const {
    const Json::Value& v = Storage("rejectionReason");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>rejectionReason</code>' attribute.
   *
   * This value explains why YouTube rejected an uploaded video. This property
   * is only present if the uploadStatus property indicates that the upload was
   * rejected.
   *
   * @param[in] value The new value.
   */
  void set_rejection_reason(const StringPiece& value) {
    *MutableStorage("rejectionReason") = value.data();
  }

  /**
   * Determine if the '<code>uploadStatus</code>' attribute was set.
   *
   * @return true if the '<code>uploadStatus</code>' attribute was set.
   */
  bool has_upload_status() const {
    return Storage().isMember("uploadStatus");
  }

  /**
   * Clears the '<code>uploadStatus</code>' attribute.
   */
  void clear_upload_status() {
    MutableStorage()->removeMember("uploadStatus");
  }


  /**
   * Get the value of the '<code>uploadStatus</code>' attribute.
   */
  const StringPiece get_upload_status() const {
    const Json::Value& v = Storage("uploadStatus");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>uploadStatus</code>' attribute.
   *
   * The status of the uploaded video.
   *
   * @param[in] value The new value.
   */
  void set_upload_status(const StringPiece& value) {
    *MutableStorage("uploadStatus") = value.data();
  }

 private:
  void operator=(const VideoStatus&);
};  // VideoStatus
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_VIDEO_STATUS_H_
