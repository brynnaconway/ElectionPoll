// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_LIVE_BROADCAST_STATISTICS_H_
#define  GOOGLE_YOUTUBE_API_LIVE_BROADCAST_STATISTICS_H_

#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Statistics about the live broadcast. These represent a snapshot of the values
 * at the time of the request. Statistics are only returned for live broadcasts.
 *
 * @ingroup DataObject
 */
class LiveBroadcastStatistics : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static LiveBroadcastStatistics* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit LiveBroadcastStatistics(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit LiveBroadcastStatistics(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~LiveBroadcastStatistics();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::LiveBroadcastStatistics</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::LiveBroadcastStatistics");
  }

  /**
   * Determine if the '<code>concurrentViewers</code>' attribute was set.
   *
   * @return true if the '<code>concurrentViewers</code>' attribute was set.
   */
  bool has_concurrent_viewers() const {
    return Storage().isMember("concurrentViewers");
  }

  /**
   * Clears the '<code>concurrentViewers</code>' attribute.
   */
  void clear_concurrent_viewers() {
    MutableStorage()->removeMember("concurrentViewers");
  }


  /**
   * Get the value of the '<code>concurrentViewers</code>' attribute.
   */
  uint64 get_concurrent_viewers() const {
    const Json::Value& storage = Storage("concurrentViewers");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>concurrentViewers</code>' attribute.
   *
   * The number of viewers currently watching the broadcast. The property and
   * its value will be present if the broadcast has current viewers and the
   * broadcast owner has not hidden the viewcount for the video. Note that
   * YouTube stops tracking the number of concurrent viewers for a broadcast
   * when the broadcast ends. So, this property would not identify the number of
   * viewers watching an archived video of a live broadcast that already ended.
   *
   * @param[in] value The new value.
   */
  void set_concurrent_viewers(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("concurrentViewers"));
  }

  /**
   * Determine if the '<code>totalChatCount</code>' attribute was set.
   *
   * @return true if the '<code>totalChatCount</code>' attribute was set.
   */
  bool has_total_chat_count() const {
    return Storage().isMember("totalChatCount");
  }

  /**
   * Clears the '<code>totalChatCount</code>' attribute.
   */
  void clear_total_chat_count() {
    MutableStorage()->removeMember("totalChatCount");
  }


  /**
   * Get the value of the '<code>totalChatCount</code>' attribute.
   */
  uint64 get_total_chat_count() const {
    const Json::Value& storage = Storage("totalChatCount");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>totalChatCount</code>' attribute.
   *
   * The total number of live chat messages currently on the broadcast. The
   * property and its value will be present if the broadcast is public, has the
   * live chat feature enabled, and has at least one message. Note that this
   * field will not be filled after the broadcast ends. So this property would
   * not identify the number of chat messages for an archived video of a
   * completed live broadcast.
   *
   * @param[in] value The new value.
   */
  void set_total_chat_count(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("totalChatCount"));
  }

 private:
  void operator=(const LiveBroadcastStatistics&);
};  // LiveBroadcastStatistics
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_LIVE_BROADCAST_STATISTICS_H_
