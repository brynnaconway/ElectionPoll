// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_COMMENT_THREAD_SNIPPET_H_
#define  GOOGLE_YOUTUBE_API_COMMENT_THREAD_SNIPPET_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/youtube_api/comment.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Basic details about a comment thread.
 *
 * @ingroup DataObject
 */
class CommentThreadSnippet : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static CommentThreadSnippet* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CommentThreadSnippet(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit CommentThreadSnippet(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~CommentThreadSnippet();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::CommentThreadSnippet</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::CommentThreadSnippet");
  }

  /**
   * Determine if the '<code>canReply</code>' attribute was set.
   *
   * @return true if the '<code>canReply</code>' attribute was set.
   */
  bool has_can_reply() const {
    return Storage().isMember("canReply");
  }

  /**
   * Clears the '<code>canReply</code>' attribute.
   */
  void clear_can_reply() {
    MutableStorage()->removeMember("canReply");
  }


  /**
   * Get the value of the '<code>canReply</code>' attribute.
   */
  bool get_can_reply() const {
    const Json::Value& storage = Storage("canReply");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>canReply</code>' attribute.
   *
   * Whether the current viewer of the thread can reply to it. This is viewer
   * specific - other viewers may see a different value for this field.
   *
   * @param[in] value The new value.
   */
  void set_can_reply(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("canReply"));
  }

  /**
   * Determine if the '<code>channelId</code>' attribute was set.
   *
   * @return true if the '<code>channelId</code>' attribute was set.
   */
  bool has_channel_id() const {
    return Storage().isMember("channelId");
  }

  /**
   * Clears the '<code>channelId</code>' attribute.
   */
  void clear_channel_id() {
    MutableStorage()->removeMember("channelId");
  }


  /**
   * Get the value of the '<code>channelId</code>' attribute.
   */
  const StringPiece get_channel_id() const {
    const Json::Value& v = Storage("channelId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>channelId</code>' attribute.
   *
   * The YouTube channel the comments in the thread refer to or the channel with
   * the video the comments refer to. If video_id isn't set the comments refer
   * to the channel itself.
   *
   * @param[in] value The new value.
   */
  void set_channel_id(const StringPiece& value) {
    *MutableStorage("channelId") = value.data();
  }

  /**
   * Determine if the '<code>isPublic</code>' attribute was set.
   *
   * @return true if the '<code>isPublic</code>' attribute was set.
   */
  bool has_is_public() const {
    return Storage().isMember("isPublic");
  }

  /**
   * Clears the '<code>isPublic</code>' attribute.
   */
  void clear_is_public() {
    MutableStorage()->removeMember("isPublic");
  }


  /**
   * Get the value of the '<code>isPublic</code>' attribute.
   */
  bool get_is_public() const {
    const Json::Value& storage = Storage("isPublic");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>isPublic</code>' attribute.
   *
   * Whether the thread (and therefore all its comments) is visible to all
   * YouTube users.
   *
   * @param[in] value The new value.
   */
  void set_is_public(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("isPublic"));
  }

  /**
   * Determine if the '<code>topLevelComment</code>' attribute was set.
   *
   * @return true if the '<code>topLevelComment</code>' attribute was set.
   */
  bool has_top_level_comment() const {
    return Storage().isMember("topLevelComment");
  }

  /**
   * Clears the '<code>topLevelComment</code>' attribute.
   */
  void clear_top_level_comment() {
    MutableStorage()->removeMember("topLevelComment");
  }


  /**
   * Get a reference to the value of the '<code>topLevelComment</code>'
   * attribute.
   */
  const Comment get_top_level_comment() const;

  /**
   * Gets a reference to a mutable value of the '<code>topLevelComment</code>'
   * property.
   *
   * The top level comment of this thread.
   *
   * @return The result can be modified to change the attribute value.
   */
  Comment mutable_topLevelComment();

  /**
   * Determine if the '<code>totalReplyCount</code>' attribute was set.
   *
   * @return true if the '<code>totalReplyCount</code>' attribute was set.
   */
  bool has_total_reply_count() const {
    return Storage().isMember("totalReplyCount");
  }

  /**
   * Clears the '<code>totalReplyCount</code>' attribute.
   */
  void clear_total_reply_count() {
    MutableStorage()->removeMember("totalReplyCount");
  }


  /**
   * Get the value of the '<code>totalReplyCount</code>' attribute.
   */
  uint32 get_total_reply_count() const {
    const Json::Value& storage = Storage("totalReplyCount");
    return client::JsonValueToCppValueHelper<uint32 >(storage);
  }

  /**
   * Change the '<code>totalReplyCount</code>' attribute.
   *
   * The total number of replies (not including the top level comment).
   *
   * @param[in] value The new value.
   */
  void set_total_reply_count(uint32 value) {
    client::SetJsonValueFromCppValueHelper<uint32 >(
      value, MutableStorage("totalReplyCount"));
  }

  /**
   * Determine if the '<code>videoId</code>' attribute was set.
   *
   * @return true if the '<code>videoId</code>' attribute was set.
   */
  bool has_video_id() const {
    return Storage().isMember("videoId");
  }

  /**
   * Clears the '<code>videoId</code>' attribute.
   */
  void clear_video_id() {
    MutableStorage()->removeMember("videoId");
  }


  /**
   * Get the value of the '<code>videoId</code>' attribute.
   */
  const StringPiece get_video_id() const {
    const Json::Value& v = Storage("videoId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>videoId</code>' attribute.
   *
   * The ID of the video the comments refer to, if any. No video_id implies a
   * channel discussion comment.
   *
   * @param[in] value The new value.
   */
  void set_video_id(const StringPiece& value) {
    *MutableStorage("videoId") = value.data();
  }

 private:
  void operator=(const CommentThreadSnippet&);
};  // CommentThreadSnippet
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_COMMENT_THREAD_SNIPPET_H_
