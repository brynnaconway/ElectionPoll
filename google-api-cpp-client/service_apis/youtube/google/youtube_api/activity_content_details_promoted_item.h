// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   C++ generator version: 0.1.3

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   YouTube Data API (youtube/v3)
// Generated from:
//   Version: v3
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.3
#ifndef  GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_PROMOTED_ITEM_H_
#define  GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_PROMOTED_ITEM_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_youtube_api {
using namespace googleapis;

/**
 * Details about a resource which is being promoted.
 *
 * @ingroup DataObject
 */
class ActivityContentDetailsPromotedItem : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ActivityContentDetailsPromotedItem* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ActivityContentDetailsPromotedItem(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ActivityContentDetailsPromotedItem(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ActivityContentDetailsPromotedItem();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_youtube_api::ActivityContentDetailsPromotedItem</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_youtube_api::ActivityContentDetailsPromotedItem");
  }

  /**
   * Determine if the '<code>adTag</code>' attribute was set.
   *
   * @return true if the '<code>adTag</code>' attribute was set.
   */
  bool has_ad_tag() const {
    return Storage().isMember("adTag");
  }

  /**
   * Clears the '<code>adTag</code>' attribute.
   */
  void clear_ad_tag() {
    MutableStorage()->removeMember("adTag");
  }


  /**
   * Get the value of the '<code>adTag</code>' attribute.
   */
  const StringPiece get_ad_tag() const {
    const Json::Value& v = Storage("adTag");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>adTag</code>' attribute.
   *
   * The URL the client should fetch to request a promoted item.
   *
   * @param[in] value The new value.
   */
  void set_ad_tag(const StringPiece& value) {
    *MutableStorage("adTag") = value.data();
  }

  /**
   * Determine if the '<code>clickTrackingUrl</code>' attribute was set.
   *
   * @return true if the '<code>clickTrackingUrl</code>' attribute was set.
   */
  bool has_click_tracking_url() const {
    return Storage().isMember("clickTrackingUrl");
  }

  /**
   * Clears the '<code>clickTrackingUrl</code>' attribute.
   */
  void clear_click_tracking_url() {
    MutableStorage()->removeMember("clickTrackingUrl");
  }


  /**
   * Get the value of the '<code>clickTrackingUrl</code>' attribute.
   */
  const StringPiece get_click_tracking_url() const {
    const Json::Value& v = Storage("clickTrackingUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>clickTrackingUrl</code>' attribute.
   *
   * The URL the client should ping to indicate that the user clicked through on
   * this promoted item.
   *
   * @param[in] value The new value.
   */
  void set_click_tracking_url(const StringPiece& value) {
    *MutableStorage("clickTrackingUrl") = value.data();
  }

  /**
   * Determine if the '<code>creativeViewUrl</code>' attribute was set.
   *
   * @return true if the '<code>creativeViewUrl</code>' attribute was set.
   */
  bool has_creative_view_url() const {
    return Storage().isMember("creativeViewUrl");
  }

  /**
   * Clears the '<code>creativeViewUrl</code>' attribute.
   */
  void clear_creative_view_url() {
    MutableStorage()->removeMember("creativeViewUrl");
  }


  /**
   * Get the value of the '<code>creativeViewUrl</code>' attribute.
   */
  const StringPiece get_creative_view_url() const {
    const Json::Value& v = Storage("creativeViewUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>creativeViewUrl</code>' attribute.
   *
   * The URL the client should ping to indicate that the user was shown this
   * promoted item.
   *
   * @param[in] value The new value.
   */
  void set_creative_view_url(const StringPiece& value) {
    *MutableStorage("creativeViewUrl") = value.data();
  }

  /**
   * Determine if the '<code>ctaType</code>' attribute was set.
   *
   * @return true if the '<code>ctaType</code>' attribute was set.
   */
  bool has_cta_type() const {
    return Storage().isMember("ctaType");
  }

  /**
   * Clears the '<code>ctaType</code>' attribute.
   */
  void clear_cta_type() {
    MutableStorage()->removeMember("ctaType");
  }


  /**
   * Get the value of the '<code>ctaType</code>' attribute.
   */
  const StringPiece get_cta_type() const {
    const Json::Value& v = Storage("ctaType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>ctaType</code>' attribute.
   *
   * The type of call-to-action, a message to the user indicating action that
   * can be taken.
   *
   * @param[in] value The new value.
   */
  void set_cta_type(const StringPiece& value) {
    *MutableStorage("ctaType") = value.data();
  }

  /**
   * Determine if the '<code>customCtaButtonText</code>' attribute was set.
   *
   * @return true if the '<code>customCtaButtonText</code>' attribute was set.
   */
  bool has_custom_cta_button_text() const {
    return Storage().isMember("customCtaButtonText");
  }

  /**
   * Clears the '<code>customCtaButtonText</code>' attribute.
   */
  void clear_custom_cta_button_text() {
    MutableStorage()->removeMember("customCtaButtonText");
  }


  /**
   * Get the value of the '<code>customCtaButtonText</code>' attribute.
   */
  const StringPiece get_custom_cta_button_text() const {
    const Json::Value& v = Storage("customCtaButtonText");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>customCtaButtonText</code>' attribute.
   *
   * The custom call-to-action button text. If specified, it will override the
   * default button text for the cta_type.
   *
   * @param[in] value The new value.
   */
  void set_custom_cta_button_text(const StringPiece& value) {
    *MutableStorage("customCtaButtonText") = value.data();
  }

  /**
   * Determine if the '<code>descriptionText</code>' attribute was set.
   *
   * @return true if the '<code>descriptionText</code>' attribute was set.
   */
  bool has_description_text() const {
    return Storage().isMember("descriptionText");
  }

  /**
   * Clears the '<code>descriptionText</code>' attribute.
   */
  void clear_description_text() {
    MutableStorage()->removeMember("descriptionText");
  }


  /**
   * Get the value of the '<code>descriptionText</code>' attribute.
   */
  const StringPiece get_description_text() const {
    const Json::Value& v = Storage("descriptionText");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>descriptionText</code>' attribute.
   *
   * The text description to accompany the promoted item.
   *
   * @param[in] value The new value.
   */
  void set_description_text(const StringPiece& value) {
    *MutableStorage("descriptionText") = value.data();
  }

  /**
   * Determine if the '<code>destinationUrl</code>' attribute was set.
   *
   * @return true if the '<code>destinationUrl</code>' attribute was set.
   */
  bool has_destination_url() const {
    return Storage().isMember("destinationUrl");
  }

  /**
   * Clears the '<code>destinationUrl</code>' attribute.
   */
  void clear_destination_url() {
    MutableStorage()->removeMember("destinationUrl");
  }


  /**
   * Get the value of the '<code>destinationUrl</code>' attribute.
   */
  const StringPiece get_destination_url() const {
    const Json::Value& v = Storage("destinationUrl");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>destinationUrl</code>' attribute.
   *
   * The URL the client should direct the user to, if the user chooses to visit
   * the advertiser's website.
   *
   * @param[in] value The new value.
   */
  void set_destination_url(const StringPiece& value) {
    *MutableStorage("destinationUrl") = value.data();
  }

  /**
   * Determine if the '<code>forecastingUrl</code>' attribute was set.
   *
   * @return true if the '<code>forecastingUrl</code>' attribute was set.
   */
  bool has_forecasting_url() const {
    return Storage().isMember("forecastingUrl");
  }

  /**
   * Clears the '<code>forecastingUrl</code>' attribute.
   */
  void clear_forecasting_url() {
    MutableStorage()->removeMember("forecastingUrl");
  }


  /**
   * Get a reference to the value of the '<code>forecastingUrl</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_forecasting_url() const {
     const Json::Value& storage = Storage("forecastingUrl");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>forecastingUrl</code>'
   * property.
   *
   * The list of forecasting URLs. The client should ping all of these URLs when
   * a promoted item is not available, to indicate that a promoted item could
   * have been shown.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_forecastingUrl() {
    Json::Value* storage = MutableStorage("forecastingUrl");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>impressionUrl</code>' attribute was set.
   *
   * @return true if the '<code>impressionUrl</code>' attribute was set.
   */
  bool has_impression_url() const {
    return Storage().isMember("impressionUrl");
  }

  /**
   * Clears the '<code>impressionUrl</code>' attribute.
   */
  void clear_impression_url() {
    MutableStorage()->removeMember("impressionUrl");
  }


  /**
   * Get a reference to the value of the '<code>impressionUrl</code>' attribute.
   */
  const client::JsonCppArray<string > get_impression_url() const {
     const Json::Value& storage = Storage("impressionUrl");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>impressionUrl</code>'
   * property.
   *
   * The list of impression URLs. The client should ping all of these URLs to
   * indicate that the user was shown this promoted item.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_impressionUrl() {
    Json::Value* storage = MutableStorage("impressionUrl");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>videoId</code>' attribute was set.
   *
   * @return true if the '<code>videoId</code>' attribute was set.
   */
  bool has_video_id() const {
    return Storage().isMember("videoId");
  }

  /**
   * Clears the '<code>videoId</code>' attribute.
   */
  void clear_video_id() {
    MutableStorage()->removeMember("videoId");
  }


  /**
   * Get the value of the '<code>videoId</code>' attribute.
   */
  const StringPiece get_video_id() const {
    const Json::Value& v = Storage("videoId");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>videoId</code>' attribute.
   *
   * The ID that YouTube uses to uniquely identify the promoted video.
   *
   * @param[in] value The new value.
   */
  void set_video_id(const StringPiece& value) {
    *MutableStorage("videoId") = value.data();
  }

 private:
  void operator=(const ActivityContentDetailsPromotedItem&);
};  // ActivityContentDetailsPromotedItem
}  // namespace google_youtube_api
#endif  // GOOGLE_YOUTUBE_API_ACTIVITY_CONTENT_DETAILS_PROMOTED_ITEM_H_
