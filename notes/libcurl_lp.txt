libcurl tutorial:

curl_global_init()
	- initializes some of the libcurl functionality globally
	- only call it once inside of a program
	- CURL_GLOBAL_ALL
		parameter that is a bit pattern that tells libcurl what to intialize...global_all makes it initialize all known internal sub modules
	
curl_global_cleanup
	- opposite of curl_global_init
	- needs to be called with program no longer uses libcurl
	- only call it once inside of a program

2 types of interfaces for libcurl: easy interface and multi interface
	- i think we need to use multi interface to allow multimple transfers in a single thread (ie continuously retrieving data from survey results)

for c++, ALL CALLBACKS MUST BE STATIC CLASS MEMBER FUNCTIONS

HANDLES (this confuses me):
	easyhangle = curl_easy_init();
		- use one handle for every thread you plan to use for transferring

	curl_easy_setopt
		- set properties and options for this handle
		- controls how the transfers will be made

	example:
		curl_easy_setopt(handle, CURLOPT_URL, "http://domain.com/");


Actual transfer:
	success = curl_easy_perform(easyhandle);
		- connects to the remote site, do the necessary commands, and receive the transfer


#include <curl/curl.h>

int main()
{
    curl_global_init(CURL_GLOBAL_ALL);

    CURL *curl;
    CURLcode res;

    curl = curl_easy_init();
    if(curl) {
        curl_easy_setopt(curl, CURLOPT_URL, "https://docs.google.com/uc?id=documentID&export=download");
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
        curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
        curl_easy_setopt(curl, CURLOPT_VERBOSE, 1L);
        res = curl_easy_perform(curl);
    }
    curl_easy_cleanup(curl);
    return 0;
}
